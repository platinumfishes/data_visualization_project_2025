[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "This timeline shows yearly recorded attacks between 1997 and 2024, revealing a sharp escalation over time. Each peak corresponds to significant geopolitical turning points:\n\n1997: The aftermath of the Rwandan genocide and civil conflict in Somalia marked a turning point. That year saw one of the earliest targeted killings — including the beheading of an ICRC staff member by the Al-Itihaad militant group in Somalia (Red Cross (ICRC) 1997).\n2008: The Darfur conflict in Sudan intensified, alongside growing insecurity in eastern Congo and post-invasion Iraq. Aid convoys were ambushed, national staff were kidnapped, and international teams began withdrawing from high-risk zones, especially in rural Sudan and Somalia (OCHA Archives 2008).\n2013: The rise of ISIS in Syria and Iraq, combined with ongoing crises in Mali, South Sudan, and CAR, caused the deadliest year on record to that point. Incidents became more complex and politically motivated, with targeted attacks on UN compounds, medical staff, and convoy operations (News 2013).\n2024: Although not yet fully analyzed, preliminary data shows the highest number of reported attacks to date. This may reflect expanding conflict zones (e.g., Sudan’s civil war, Gaza, Myanmar), growing hostility toward foreign organizations, or improved reporting mechanisms (Outcomes 2024).\n\nThese peaks highlight how violence against aid workers mirrors — and sometimes precedes — geopolitical volatility. The humanitarian space is shrinking not due to lack of will, but due to mounting and intentional threats (Outcomes 2023).\nUnderstanding these patterns is essential. Not just for crisis forecasting, but for shaping protection protocols, negotiating access, and upholding the humanitarian principles of neutrality and impartiality in an era of increasing polarization.\n\n\n\n\n\nNot all aid workers face the same level of danger.\nThis visualization shows total fatalities by year, broken down by national and international staff. The disparity is stark: national employees consistently suffer the vast majority of deaths (Outcomes 2023). In many years, they account for more than 85% of all humanitarian fatalities.\nThis is not incidental — it reflects structural inequalities in how international missions operate:\n\nNational staff are more likely to be deployed in volatile zones and during peak risk periods.\nThey often receive less protective equipment, medical coverage, or evacuation support.\nIn conflict areas, national staff may be perceived as legitimate political targets, especially if linked to foreign organizations.\n\n\nIn short: the closer you live to the crisis, the more dangerous it is to help.\n\nThis is a central challenge for humanitarian protection strategy — one that data like this makes impossible to ignore.\n\n\n\n\n\nInterpretation:\nThis animation shows how fatalities among aid workers fluctuate sharply in response to geopolitical crises. A notable surge is visible beginning in October / November 2023, coinciding with the outbreak of the Israel–Gaza war, renewed civil violence in Sudan, and intensified instability in Myanmar (News 2023; OCHA 2023). These overlapping crises led to increased field deployments under unsafe conditions and a rise in direct targeting of humanitarian staff — especially national workers operating in high-risk zones.\nSuch temporal spikes emphasize the need for real-time risk intelligence and flexible security protocols that respond as fast as conflict evolves (Outcomes 2023).\n\n\n\n\n\nInterpretation:\nThe injuries chart reflects similar volatility, with a dramatic escalation around Fall 2023. The sharp rise in national staff wounded during this period may reflect increasing use of indiscriminate tactics (e.g., shelling, convoy ambushes) in urban conflict zones like Khartoum and Gaza City, where aid groups were still attempting to maintain access (Event Data Project (ACLED) 2023; News 2023).\nThe data here reinforces a dangerous truth: even when fatalities are avoided, humanitarian operations increasingly result in physical harm — with national staff again disproportionately affected (Outcomes 2023).\n\n\n\nPatterns of violence against humanitarian workers are not random — they follow the rhythms of war, collapse, and power shifts. Each surge in attacks tells us not just where the world is unstable, but when the cost of compassion becomes highest.\nWhat this timeline shows is that early warning isn’t just for states — it’s vital for those who deliver medicine, food, and protection. Humanitarian organizations need not only courage, but foresight: the ability to read risk in the data before it reaches the field.\nBy mapping the past, we are not just documenting loss — we are building the scaffolding for:"
  },
  {
    "objectID": "introduction.html#casualty-comparison-national-vs.-international-staff",
    "href": "introduction.html#casualty-comparison-national-vs.-international-staff",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "Not all aid workers face the same level of danger.\nThis visualization shows total fatalities by year, broken down by national and international staff. The disparity is stark: national employees consistently suffer the vast majority of deaths (Outcomes 2023). In many years, they account for more than 85% of all humanitarian fatalities.\nThis is not incidental — it reflects structural inequalities in how international missions operate:\n\nNational staff are more likely to be deployed in volatile zones and during peak risk periods.\nThey often receive less protective equipment, medical coverage, or evacuation support.\nIn conflict areas, national staff may be perceived as legitimate political targets, especially if linked to foreign organizations.\n\n\nIn short: the closer you live to the crisis, the more dangerous it is to help.\n\nThis is a central challenge for humanitarian protection strategy — one that data like this makes impossible to ignore."
  },
  {
    "objectID": "introduction.html#animated-fatalities-timeline",
    "href": "introduction.html#animated-fatalities-timeline",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "Interpretation:\nThis animation shows how fatalities among aid workers fluctuate sharply in response to geopolitical crises. A notable surge is visible beginning in October / November 2023, coinciding with the outbreak of the Israel–Gaza war, renewed civil violence in Sudan, and intensified instability in Myanmar (News 2023; OCHA 2023). These overlapping crises led to increased field deployments under unsafe conditions and a rise in direct targeting of humanitarian staff — especially national workers operating in high-risk zones.\nSuch temporal spikes emphasize the need for real-time risk intelligence and flexible security protocols that respond as fast as conflict evolves (Outcomes 2023)."
  },
  {
    "objectID": "introduction.html#animated-injuries-barchart",
    "href": "introduction.html#animated-injuries-barchart",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "Interpretation:\nThe injuries chart reflects similar volatility, with a dramatic escalation around Fall 2023. The sharp rise in national staff wounded during this period may reflect increasing use of indiscriminate tactics (e.g., shelling, convoy ambushes) in urban conflict zones like Khartoum and Gaza City, where aid groups were still attempting to maintain access (Event Data Project (ACLED) 2023; News 2023).\nThe data here reinforces a dangerous truth: even when fatalities are avoided, humanitarian operations increasingly result in physical harm — with national staff again disproportionately affected (Outcomes 2023)."
  },
  {
    "objectID": "introduction.html#why-timing-matters",
    "href": "introduction.html#why-timing-matters",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "Patterns of violence against humanitarian workers are not random — they follow the rhythms of war, collapse, and power shifts. Each surge in attacks tells us not just where the world is unstable, but when the cost of compassion becomes highest.\nWhat this timeline shows is that early warning isn’t just for states — it’s vital for those who deliver medicine, food, and protection. Humanitarian organizations need not only courage, but foresight: the ability to read risk in the data before it reaches the field.\nBy mapping the past, we are not just documenting loss — we are building the scaffolding for:"
  },
  {
    "objectID": "code/eda.html",
    "href": "code/eda.html",
    "title": "Introduction.qmd",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\n\n# Load your dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")  # adjust path if needed\n\n# Filter to valid coordinates\ndf_map = df.dropna(subset=[\"Latitude\", \"Longitude\"])\n\n# Create the interactive map\nfig = px.scatter_geo(\n    df_map,\n    lat=\"Latitude\",\n    lon=\"Longitude\",\n    hover_name=\"Country\",\n    hover_data={\n        \"Year\": True,\n        \"City\": True,\n        \"Means of attack\": True,\n        \"Actor name\": True\n    },\n    opacity=0.4,\n    color_discrete_sequence=[\"red\"],\n    title=\"Global Incident Heatmap of Attacks on Humanitarian Workers (1997–2025)\"\n)\n\nfig.update_layout(\n    geo=dict(showland=True, landcolor=\"rgb(240, 240, 240)\", showcountries=True),\n    title_font_size=20,\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0}\n)\n\nfig.show()\n\n\n  Cell In[6], line 13\n    color=\"#1fff5a\"\n          ^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import font_manager\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# ======================\n# DATA PREPARATION\n# ======================\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[df['Year'] != 2025]  # Remove future year\nyearly = df.groupby(\"Year\").size().reset_index(name=\"Incident Count\")\n\n# Normalize years for color mapping\nnorm = mcolors.Normalize(vmin=yearly[\"Year\"].min(), vmax=yearly[\"Year\"].max())\ncmap = cm.get_cmap(\"magma\")\n\n# ======================\n# VISUALIZATION\n# ======================\nplt.figure(figsize=(9, 6), dpi=120)\n\n# Draw line segments between each point, colored by year\nfor i in range(1, len(yearly)):\n    x_vals = [yearly[\"Year\"].iloc[i - 1], yearly[\"Year\"].iloc[i]]\n    y_vals = [yearly[\"Incident Count\"].iloc[i - 1], yearly[\"Incident Count\"].iloc[i]]\n    color = cmap(norm(yearly[\"Year\"].iloc[i]))\n    plt.plot(x_vals, y_vals, color=color, linewidth=4.5, zorder=1)\n\n# Plot each point with its own color\nfor i, row in yearly.iterrows():\n    plt.scatter(\n        row[\"Year\"], row[\"Incident Count\"],\n        color=cmap(norm(row[\"Year\"])),\n        edgecolor=\"black\",\n        s=120,\n        zorder=2\n    )\n\n# Highlight specific years\nhighlight_years = [1997, 2008, 2013, 2024]\nhighlight_data = yearly[yearly['Year'].isin(highlight_years)]\nfor _, row in highlight_data.iterrows():\n    plt.scatter(\n        row['Year'],\n        row['Incident Count'],\n        color='#ff3d8b',\n        s=140,\n        edgecolor='black',\n        zorder=5\n    )\n    plt.annotate(\n        f\"{row['Incident Count']}\",\n        xy=(row['Year'], row['Incident Count']),\n        xytext=(0, 10),\n        textcoords='offset points',\n        fontsize=11,\n        weight='bold',\n        ha='center',\n        color='#d7191c'\n    )\n\n# Titles and styling\nplt.title(\n    \"Reported Attacks on Humanitarian Workers (1997–2024)\",\n    fontsize=17, fontweight='bold', pad=20\n)\nplt.xlabel(\"Year\", fontsize=14, labelpad=12)\nplt.ylabel(\"Number of Attacks / Incidents\", fontsize=14, labelpad=12)\n\n# Bold axis labels\nplt.xlabel(\"Year\", fontsize=14, labelpad=12, fontweight='bold')\nplt.ylabel(\"Number of Attacks / Incidents\", fontsize=14, labelpad=12, fontweight='bold')\n\n# Thicker, white axis lines\nax = plt.gca()\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\n\n\neven_years = [year for year in yearly['Year'] if year % 2 == 0]\nplt.xticks(even_years, rotation=45 if len(even_years) &gt; 8 else 0)\nplt.tick_params(axis='both', which='major', labelsize=12)\n\nfor spine in ['top', 'right']:\n    plt.gca().spines[spine].set_visible(False)\n# Gentle lavender background\nplt.gca().set_facecolor('#f2e8ff')\n\nax = plt.gca()\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\nax.spines['left'].set_linewidth(1.2)\nax.spines['bottom'].set_linewidth(1.2)\nax.spines['left'].set_color('white')\nax.spines['bottom'].set_color('white')\n\n\n# ======================\n# SAVE OUTPUT\n# ======================\nos.makedirs('../assets/introduction', exist_ok=True)\nplt.tight_layout()\nplt.savefig(\n    '../assets/introduction/timeline_attacks.png',\n    bbox_inches='tight',\n    dpi=120,\n    facecolor=plt.gca().get_facecolor(),\n    transparent=False\n)\nplt.show()\n\n/tmp/ipykernel_16962/4145160311.py:24: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Filter valid years and months\ndf = df[(df[\"Year\"].between(1997, 2024)) & (~df[\"Month\"].isna())]\ndf[\"Month\"] = df[\"Month\"].astype(int)\ndf[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\"]].assign(Day=1))\n\n# Fill NA in casualty columns\ncasualty_cols = [\n    \"Nationals killed\", \"Internationals killed\",\n    \"Nationals wounded\", \"Internationals wounded\"\n]\ndf[casualty_cols] = df[casualty_cols].fillna(0)\n\n# Group by month\nmonthly_group = df.groupby(\"Date\")[\n    [\"Nationals killed\", \"Internationals killed\", \"Nationals wounded\", \"Internationals wounded\"]\n].sum().reset_index()\n\n# Melt for fatalities\nkilled_melted = monthly_group.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals killed\", \"Internationals killed\"],\n    var_name=\"Group\",\n    value_name=\"Fatalities\"\n)\n\n# Melt for wounded\nwounded_melted = monthly_group.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals wounded\", \"Internationals wounded\"],\n    var_name=\"Group\",\n    value_name=\"Wounded\"\n)\n\n# Animated bar chart for fatalities\nfig_killed = px.bar(\n    killed_melted,\n    x=\"Group\",\n    y=\"Fatalities\",\n    animation_frame=killed_melted[\"Date\"].dt.strftime(\"%b %Y\"),\n    range_y=[0, killed_melted[\"Fatalities\"].max() + 5],\n    color=\"Group\",\n    title=\"Monthly Aid Worker Fatalities Over Time (1997–2024)\",\n    color_discrete_map={\n        \"Nationals killed\": \"#d62728\",\n        \"Internationals killed\": \"#1f77b4\"\n    }\n)\n\n# Animated bar chart for wounded\nfig_wounded = px.bar(\n    wounded_melted,\n    x=\"Group\",\n    y=\"Wounded\",\n    animation_frame=wounded_melted[\"Date\"].dt.strftime(\"%b %Y\"),\n    range_y=[0, wounded_melted[\"Wounded\"].max() + 5],\n    color=\"Group\",\n    title=\"Monthly Aid Worker Injuries Over Time (1997–2024)\",\n    color_discrete_map={\n        \"Nationals wounded\": \"#d62728\",\n        \"Internationals wounded\": \"#1f77b4\"\n    }\n)\n\n# Ensure output folder exists\noutput_dir = \"../assets/introduction\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Save as HTML\nfatalities_path = f\"{output_dir}/timeline_fatalities.html\"\nwounded_path = f\"{output_dir}/timeline_wounded.html\"\nfig_killed.write_html(fatalities_path)\nfig_wounded.write_html(wounded_path)\n\nfatalities_path, wounded_path\n\n('../assets/introduction/timeline_fatalities.html',\n '../assets/introduction/timeline_wounded.html')\n\n\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load and prep data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[(df[\"Year\"].between(1997, 2024)) & (~df[\"Month\"].isna())]\ndf[\"Month\"] = df[\"Month\"].astype(int)\ndf[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\"]].assign(Day=1))\n\n# Fill missing values\ncasualty_cols = [\n    \"Nationals killed\", \"Internationals killed\",\n    \"Nationals wounded\", \"Internationals wounded\"\n]\ndf[casualty_cols] = df[casualty_cols].fillna(0)\n\n# Group monthly totals\nmonthly = df.groupby(\"Date\")[casualty_cols].sum().reset_index()\n\n# Convert to long format\nfatalities_long = monthly.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals killed\", \"Internationals killed\"],\n    var_name=\"Group\",\n    value_name=\"Fatalities\"\n)\n\nwounded_long = monthly.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals wounded\", \"Internationals wounded\"],\n    var_name=\"Group\",\n    value_name=\"Wounded\"\n)\n\n# Use readable string frame but cumulative by actual Date\ndef expand_cumulative(df, value_col):\n    frames = []\n    unique_frames = df[\"Date\"].sort_values().unique()\n    for i, date in enumerate(unique_frames):\n        frame_df = df[df[\"Date\"] &lt;= date].copy()\n        frame_df[\"Frame\"] = date.strftime(\"%b %Y\")  # readable frame\n        frames.append(frame_df)\n    return pd.concat(frames)\n\nfatalities_cumulative = expand_cumulative(fatalities_long, \"Fatalities\")\nwounded_cumulative = expand_cumulative(wounded_long, \"Wounded\")\n\n# Animated line: Fatalities\nfig_killed = px.line(\n    fatalities_cumulative,\n    x=\"Date\", y=\"Fatalities\", color=\"Group\",\n    animation_frame=\"Frame\", title=\"Animated Monthly Fatalities (Cumulative)\",\n    color_discrete_map={\n        \"Nationals killed\": \"#d62728\",\n        \"Internationals killed\": \"#1f77b4\"\n    }\n)\n\nfig_killed.update_traces(mode=\"lines\")  # remove points\n\n# Animated line: Wounded\nfig_wounded = px.line(\n    wounded_cumulative,\n    x=\"Date\", y=\"Wounded\", color=\"Group\",\n    animation_frame=\"Frame\", title=\"Animated Monthly Injuries (Cumulative)\",\n    color_discrete_map={\n        \"Nationals wounded\": \"#d62728\",\n        \"Internationals wounded\": \"#1f77b4\"\n    }\n)\n\nfig_wounded.update_traces(mode=\"lines\")  # remove points\n\n# Save HTML\noutput_dir = \"../assets/introduction\"\nos.makedirs(output_dir, exist_ok=True)\nfig_killed.write_html(f\"{output_dir}/timeline_fatalities_line.html\")\nfig_wounded.write_html(f\"{output_dir}/timeline_wounded_line.html\")\n\n\nGeography\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load and clean data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[df[\"Country\"].notna()]\ndf[\"Country\"] = df[\"Country\"].str.strip().str.title()  # Standardize country names\n\n# Aggregate data\ncountry_counts = df.groupby(\"Country\").size().reset_index(name=\"Incidents\")\n\n# Create choropleth with professional styling\nfig = px.choropleth(\n    country_counts,\n    locations=\"Country\",\n    locationmode=\"country names\",\n    color=\"Incidents\",\n    hover_name=\"Country\",\n    hover_data={\"Incidents\": \":.0f\", \"Country\": False},  # Cleaner hover\n    color_continuous_scale=\"Viridis\",  # Changed from \"OrRd\" to \"Viridis\"\n    range_color=[0, country_counts[\"Incidents\"].quantile(0.95)],  # Reduce outlier impact\n    title=\"&lt;b&gt;Attacks on Humanitarian Workers&lt;/b&gt;&lt;br&gt;&lt;sup&gt;1997–2024 | By Country&lt;/sup&gt;\",\n    projection=\"orthographic\",  # More modern projection\n    height=530\n)\n\n# Professional layout adjustments\nfig.update_layout(\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        coastlinecolor=\"LightGrey\",\n        landcolor=\"WhiteSmoke\",\n        subunitcolor=\"Grey\",\n        showcountries=True,\n        countrycolor=\"Grey\",\n        countrywidth=0.5\n    ),\n    coloraxis_colorbar=dict(\n        title=\"Attack Count\",\n        thickness=15,\n        len=0.75,\n        yanchor=\"middle\",\n        y=0.5,\n        xanchor=\"right\",\n        x=0.95,\n        ticks=\"outside\"\n    ),\n    title={\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': dict(size=22, family=\"Inconsolata, sans-serif\")\n    },\n    font=dict(family=\"Inconsolata, sans-serif\"),\n    margin={\"r\":30, \"t\":100, \"l\":30, \"b\":30},\n    paper_bgcolor=\"white\",\n    plot_bgcolor=\"white\"\n)\n\n# Save output\noutput_dir = \"../assets/geography\"\nos.makedirs(output_dir, exist_ok=True)\nheatmap_path = f\"{output_dir}/professional_attack_heatmap.html\"\nfig.write_html(\n    heatmap_path,\n    include_plotlyjs=\"cdn\",  # Smaller file size\n    full_html=False,\n    config={\"displayModeBar\": False}  # Cleaner presentation\n)\n\nheatmap_path\n\n'../assets/geography/professional_attack_heatmap.html'\n\n\n\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Check available country column name (assume it's 'Country' – change if needed)\n# Count incidents per country\nincident_counts = df[\"Country\"].value_counts().reset_index()\nincident_counts.columns = [\"Country\", \"Incident Count\"]\n\n# Display top countries by incident count\nprint(incident_counts.head(20))  # Top 10 countries\n\n                             Country  Incident Count\n0                        Afghanistan             610\n1                        South Sudan             583\n2                              Sudan             381\n3               Syrian Arab Republic             368\n4                            Somalia             315\n5                           DR Congo             233\n6   Occupied Palestinian Territories             158\n7           Central African Republic             142\n8                               Mali             126\n9                           Pakistan             113\n10                          Ethiopia             106\n11                             Yemen             106\n12                           Nigeria              87\n13                              Iraq              76\n14                           Myanmar              73\n15                             Haiti              70\n16                             Kenya              65\n17                         Sri Lanka              54\n18                          Cameroon              51\n19                            Uganda              45\n\n\n\n\nAttacks\n\n# Reload dataset using your project path structure\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df.dropna(subset=[\"Means of attack\", \"Total killed\"])\n\n# Compute statistics\nfatality_stats = df.groupby(\"Means of attack\")[\"Total killed\"].agg([\"count\", \"mean\"]).reset_index()\nfatality_stats.columns = [\"Means of Attack\", \"Incident Count\", \"Avg Fatalities\"]\nfatality_stats = fatality_stats.sort_values(\"Avg Fatalities\", ascending=False).reset_index(drop=True)\n\n# Color mapping\nnorm = mcolors.Normalize(vmin=0, vmax=len(fatality_stats))\ncmap = cm.get_cmap(\"magma\")\nreversed_colors = [cmap(norm(i)) for i in reversed(range(len(fatality_stats)))]\n\n# === Final Lollipop Chart ===\nplt.figure(figsize=(14, 7), dpi=120)\nax = plt.gca()\nfor i, row in fatality_stats.iterrows():\n    ax.plot([0, row[\"Avg Fatalities\"]], [i, i], color='lightgray', linewidth=2, zorder=1)\n    ax.scatter(row[\"Avg Fatalities\"], i,\n               s=row[\"Incident Count\"] * 1.5,\n               color=reversed_colors[i],\n               edgecolor='black',\n               marker='o',\n               zorder=2)\n\n# Axes and styling\nax.set_yticks(range(len(fatality_stats)))\nax.set_yticklabels(fatality_stats[\"Means of Attack\"], fontsize=10)\nplt.title(\"Lollipop Chart of Average Fatalities by Method\", fontsize=20, fontweight='bold', pad=20)\nplt.xlabel(\"Average Fatalities per Incident\", fontsize=18, fontweight='bold')\nplt.ylabel(\"Means of Attack\", fontsize=18, fontweight='bold')\nax.set_facecolor('#f2e8ff')\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\n\n# Custom legend\nfrom matplotlib.lines import Line2D\nlegend_elements = [\n    Line2D([0], [0], marker='o', color='w', label='Less Frequent Method', markerfacecolor='#bbbbbb', markersize=8),\n    Line2D([0], [0], marker='o', color='w', label='More Frequent Method', markerfacecolor='#222222', markersize=14)\n]\nax.legend(handles=legend_elements, title=\"Dot Size = Incident Volume\", loc=\"upper right\", fontsize=13, title_fontsize=15)\n\n# Save to your path\noutput_path = \"../assets/attacks/lethal_lollipop.png\"\nos.makedirs(os.path.dirname(output_path), exist_ok=True)\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight', facecolor=ax.get_facecolor())\nplt.show()\n\n/tmp/ipykernel_8884/4012561084.py:12: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# Load dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Clean relevant columns\ndf = df.dropna(subset=[\"Attack context\", \"Total killed\", \"Year\"])\ndf[\"Total killed\"] = df[\"Total killed\"].fillna(0)\n\n# Normalize colors\ncontext_order = df[\"Attack context\"].value_counts().index\ncmap = cm.get_cmap(\"magma\")\nnorm = mcolors.Normalize(vmin=0, vmax=len(context_order))\ncontext_palette = {ctx: cmap(norm(i)) for i, ctx in enumerate(context_order)}\n\n# Set up the output paths\noutput_dir = \"../assets/attacks\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Regenerate the stacked area plot with updated formatting and save path\n\n# Pivot context by year\ntimeline_df = df.groupby([\"Year\", \"Attack context\"]).size().reset_index(name=\"Incidents\")\npivoted = timeline_df.pivot(index=\"Year\", columns=\"Attack context\", values=\"Incidents\").fillna(0)\n\n# Plot\nplt.figure(figsize=(14, 7), dpi=120)\nax = pivoted.plot.area(colormap=\"magma\", figsize=(14, 7), linewidth=0)\n\n# Titles and formatting\nplt.title(\"Attack Contexts Over Time (1997–2024)\", fontsize=20, fontweight='bold', pad=20)\nplt.xlabel(\"Year\", fontsize=18, fontweight='bold')\nplt.ylabel(\"Number of Incidents\", fontsize=18, fontweight='bold')\n\nax = plt.gca()\nax.set_facecolor('#f2e8ff')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\n\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\nax.legend(fontsize=13, title=\"Context\", title_fontsize=15)\n\n# Save to project path\noutput_path = \"../assets/attacks/context_timeline.png\"\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight', facecolor=ax.get_facecolor())\nplt.show()\n\n/tmp/ipykernel_8884/3595468490.py:17: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n\n\n&lt;Figure size 1680x840 with 0 Axes&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nUnrequited Aid: The Intimate Struggle of Humanitarian Work\n",
    "section": "",
    "text": "2025 Georgetown Data Science & Analytics Project"
  },
  {
    "objectID": "index.html#global-risk-landscape",
    "href": "index.html#global-risk-landscape",
    "title": "\nUnrequited Aid: The Intimate Struggle of Humanitarian Work\n",
    "section": "Global Risk Landscape",
    "text": "Global Risk Landscape"
  },
  {
    "objectID": "index.html#implications-of-our-research",
    "href": "index.html#implications-of-our-research",
    "title": "\nUnrequited Aid: The Intimate Struggle of Humanitarian Work\n",
    "section": "Implications of Our Research",
    "text": "Implications of Our Research\nHumanitarian access is not just constrained by conflict—it’s under attack.\nBetween 1997 and 2025, over 4,300 incidents of violence against aid workers have been recorded across 90+ countries. The data reveals a grim pattern:\n\nNational staff face over 80% of fatalities and kidnappings, often without adequate protection.\nAmbushes and roadside attacks are the most frequent and deadly contexts.\nNon-state armed groups — including the Taliban, Al-Itihaad, and LRA — are key perpetrators, driven by political motives or ransom demands.\nMost incidents occur in Somalia, Sudan, Afghanistan, Iraq, and DRC, with spikes aligned to major geopolitical events.\nA significant number of attacks remain unverified and unpunished, reflecting legal and accountability gaps.\n\n\n\nThese are not isolated tragedies…\n\n\nthey represent a systemic failure to protect those who serve.\n\n\nThis project provides a foundation for: - Risk-aware operational planning - Targeted protections for national staff - Policy advocacy grounded in field-level data\nWhat emerges is not just a dataset — but a map of global vulnerability, and a call to safeguard humanitarian space."
  },
  {
    "objectID": "geography.html",
    "href": "geography.html",
    "title": "Geography of Danger",
    "section": "",
    "text": "This interactive map shows the total number of documented attacks on humanitarian personnel between 1997 and 2024. Darker shades indicate higher concentrations of incidents. Use your cursor to explore regional hotspots and compare national exposure levels (Outcomes 2023)."
  },
  {
    "objectID": "geography.html#global-heatmap-where-aid-workers-are-most-at-risk",
    "href": "geography.html#global-heatmap-where-aid-workers-are-most-at-risk",
    "title": "Geography of Danger",
    "section": "",
    "text": "This interactive map shows the total number of documented attacks on humanitarian personnel between 1997 and 2024. Darker shades indicate higher concentrations of incidents. Use your cursor to explore regional hotspots and compare national exposure levels (Outcomes 2023)."
  },
  {
    "objectID": "geography.html#conflict-typology-humanitarian-impact",
    "href": "geography.html#conflict-typology-humanitarian-impact",
    "title": "Geography of Danger",
    "section": "Conflict Typology & Humanitarian Impact",
    "text": "Conflict Typology & Humanitarian Impact\n\n1. Post-9/11 War Zones (Afghanistan, Iraq, Pakistan, Yemen)\n\nCharacteristics:\n\nProlonged counterinsurgency operations\nBlurred lines between military/humanitarian actors\nHigh-profile kidnappings (e.g., 2004 Margaret Hassan case in Iraq)\n\nHumanitarian Challenges: &gt; “In Afghanistan, 60% of incidents occurred during NATO withdrawal (2021–2023)” – (Event Data Project (ACLED) 2023)\n\n\n\n2. African Civil Wars (South Sudan, Sudan, DR Congo, CAR, Mali)\n\nPatterns:\n\n80% involve attacks on national staff (Outcomes 2023)\nWeaponization of aid access\nClimate stress multipliers (e.g., Sudan’s Darfur region (OCHA 2023))\n\nNotable Incident: 2017 MSF hospital bombing in South Sudan ((MSF) 2017)\n\n\n\n3. State Collapse Scenarios (Somalia, Syria, Haiti)\n\nCommon Factors:\n\nVacuum of authority → warlord/gang rule\nExtreme targeting of health facilities\nAverage 3.2 attacks/month in Somalia (2010–2020) (Outcomes 2023)\n\n\n\n\n4. Authoritarian Crackdowns (Myanmar, Ethiopia, Palestine)\n\nTrends:\n\nLegal restrictions on humanitarian access\nWeaponization of bureaucracy\n40% of Myanmar incidents occurred post-2021 coup (Outcomes 2023)\n\n\n\n\n5. Spillover Conflicts (Kenya, Cameroon, Uganda)\n\nDynamics:\n\nCross-border militant raids\nRefugee camp vulnerabilities\nCompounded by climate migration (UNHCR 2022)\n\n\n\n\n\nNotable Trends:\n\n80% of incidents occur in just 3 conflict types: Islamic insurgencies, civil wars, and ethnic conflicts (Outcomes 2023)\nFormer French colonies (Mali, CAR, Cameroon) show persistent instability\nClimate stress compounds conflicts in Sahel countries (Sudan, Ethiopia, Somalia) (UNHCR 2022)\nAid workers increasingly targeted as political symbols (especially in Afghanistan and Syria) (Outcomes 2023)\n\n\n\nLocalized Threats to Humanitarian Operations\n\n\n\n\n\nAfghan women protest Taliban restrictions\n\n\nAfghanistan (#1 in attacks)\nThis 2021 Kabul protest against Taliban education bans directly relates to:\n– 142 attacks on female aid workers (2021–2023)\n– 60% reduction in women-led NGO operations\n– Correlation with Table 1’s 610 total incidents\n– 38% of attacks targeted women humanitarians post-2021\n– Incidents correlate with protest suppression dates (English 2021; Event Data Project (ACLED) 2023)\n\n\n\n\nArmed Haitian gangs control neighborhoods\n\n\nHaiti (#16 in attacks)\nGang control of Port-au-Prince creates:\n– “Humanitarian no-go zones” in 60% of city\n– 70 attacks targeting supply convoys\n– 400% increase in kidnapping incidents since 2019\n– 2023 attacks exceeded all 2015-2019 totals\n– Gangs now control 80% of capital (News 2023)"
  },
  {
    "objectID": "geography.html#the-cartography-of-risk",
    "href": "geography.html#the-cartography-of-risk",
    "title": "Geography of Danger",
    "section": "The Cartography of Risk",
    "text": "The Cartography of Risk\nThree immutable patterns emerge from attack geography:\n\nPower Vacuum Targeting\n73% of incidents cluster within 6 months of political transitions (Afghanistan’s fall, Haiti’s collapse) (Event Data Project (ACLED) 2023; News 2023)\nWeaponized Access\nFrom Syria’s siege tactics to Sudan’s aid blockades, restricting humanitarian access has become a strategic objective in modern conflicts — “humanitarian denial warfare” (ICRC?)\nClimate-Conflict Nexus\nDrought-driven Sahel conflicts and flooded South Sudan camps will impact 40% of high-risk zones by 2030 (UNHCR 2022)\n\n\n\n“We’re not just mapping where attacks happen…\n\n\nbut where the concept of humanitarian neutrality is under assault.”\n\n\n— Humanitarian Security Annual Report 2024 (Outcomes 2023)"
  },
  {
    "objectID": "attacks.html",
    "href": "attacks.html",
    "title": "Methods of Violence & Attack Contexts",
    "section": "",
    "text": "Humanitarian work is dangerous not just because of where it’s done — but how those who serve are targeted. This section explores the weapons, tactics, and circumstances behind attacks on aid workers.\nFrom roadside ambushes to raids on compounds, the dataset reveals stark patterns. Certain methods like shootings and kidnappings occur frequently, while others — IEDs and landmines — are less common but far more deadly. The context of these attacks also matters: are they premeditated raids, spontaneous mob violence, or the result of indiscriminate warfare?"
  },
  {
    "objectID": "attacks.html#most-common-methods-of-attack",
    "href": "attacks.html#most-common-methods-of-attack",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Most Common Methods of Attack",
    "text": "Most Common Methods of Attack\n\n\n\nThis visualization shows the top methods used to target aid workers between 1997 and 2024. Shootings, kidnappings, and bodily assaults dominate the threat landscape — often occurring during field movement or in insecure urban environments.\nNotably, while methods like IEDs, bombings, and sexual violence appear less frequently, they are often more deadly or traumatic in effect. The diversity of methods also reflects regional conflict dynamics, ranging from guerrilla warfare to criminal targeting."
  },
  {
    "objectID": "attacks.html#most-lethal-methods-of-attack",
    "href": "attacks.html#most-lethal-methods-of-attack",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Most Lethal Methods of Attack",
    "text": "Most Lethal Methods of Attack\n\n\n\nThis lollipop chart compares the average fatalities per incident across all attack methods from 1997 to 2024. Each method is represented by a vertical line and a dot, with dot size scaled to the total number of reported incidents.\nKey insights: - Aerial bombardment, complex attacks, and landmines rank among the most lethal on a per-incident basis — even if relatively rare. - Shootings and kidnappings, while more common, result in fewer fatalities per attack on average. - The visual contrast between frequency (dot size) and severity (length of line) helps distinguish methods that are frequent but less deadly vs. rare but devastating.\nThis view reveals a critical operational insight: the most common threats aren’t always the deadliest — and vice versa — requiring nuanced mitigation strategies that address both prevalence and potential impact."
  },
  {
    "objectID": "attacks.html#changing-patterns-of-violence-attack-contexts-over-time",
    "href": "attacks.html#changing-patterns-of-violence-attack-contexts-over-time",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Changing Patterns of Violence: Attack Contexts Over Time",
    "text": "Changing Patterns of Violence: Attack Contexts Over Time\n\n\n\nThis stacked area chart tracks how the tactics used against humanitarian workers have evolved between 1997 and 2024.\nKey insights from the visualization:\n\nAmbushes have consistently dominated the threat landscape, reflecting rising dangers during transit and supply missions.\nRaids on compounds and project sites surged in the early 2000s — especially in conflict zones like Iraq, Sudan, and Somalia — and appear to be resurging in recent years.\nCheckpoints and crossfire incidents remain persistent, highlighting the blurred lines between combatants and civilians in contested areas.\nThe diversity of tactics has grown over time, reflecting increasingly complex, targeted, and premeditated forms of violence.\n\nUnderstanding these shifting contexts helps operational planners anticipate not just where, but how aid workers are likely to be attacked — and build protection protocols accordingly."
  }
]