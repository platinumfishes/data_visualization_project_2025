[
  {
    "objectID": "insights.html",
    "href": "insights.html",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Visual: scatter or map showing mismatch\nInsight: infrastructure alone isn’t enough\n\n\n\n\n\nVisual: scatter/boxplots\nInsight: systemic factors drive usage\n\n\n\n\n\nVisual: broadband access by race-majority counties\nInsight: racial gaps persist even when controlling for income\n\n\n\n\n\nVisual: comparison of connection tiers or access\nInsight: rural communities lag far behind\n\n\n\n\n\nBullet points drawn from your findings\n\n\n\n\nWhile broadband infrastructure may be present in many counties, its existence does not guarantee actual adoption by residents. This disconnect highlights systemic barriers—such as affordability, digital literacy, or trust—that prevent households from accessing available services.\n\n\nThis section compares two critical metrics:\n- Fixed broadband availability (measured by FCC Form 477 tiered connection speeds).\n- Household broadband adoption (sourced from the American Community Survey).\nThe accompanying Broadband Adoption Across U.S. States map visually underscores this mismatch. The color-coded ranges reveal stark disparities: while some states achieve adoption rates above 90%, others languish below 60%, despite widespread infrastructure availability.\n\n\n\nFigure 1: State-level broadband adoption rates show significant variation, with clusters of low adoption (&lt;50%) persisting even in well-connected regions.\n\n\n\n\nNotable states with high infrastructure coverage (e.g., over 700 connections per 1,000 housing units) still report adoption rates below 60%.\n\nThis gap signals that non-technical barriers—like cost, lack of digital skills, or low awareness—are likely suppressing subscription rates, even where service is technically available.\n\n\n\n\n\nWhile broadband access is critical for social and economic mobility, the rate of adoption is influenced by systemic factors such as income and education. Higher-income households and regions with more educated populations are often better equipped to afford and utilize broadband services. This section explores the connection between median household income, education attainment, and broadband access rates.\n\n\nThis section examines the relationship between the following key metrics:\n- Median household income (from the U.S. Census Bureau). - Educational attainment (percentage of population with high school or bachelor’s degree). - Broadband access rate (percentage of households with broadband access).\nThe accompanying boxplots highlight the distribution of broadband access rates across different education and income brackets. These visualizations underscore how education and income influence broadband access, showing that higher education and income levels correlate with better broadband access.\n\n\n\nFigure 2: A boxplot illustrating the relationship between household income brackets and broadband access rate. Higher income regions tend to have slightly better broadband access.\n\n\n\nFigure 3: A boxplot showing the distribution of broadband access rate based on the percentage of the population with at least a high school diploma. Educational attainment is positively correlated with broadband access.\n\n\n\nThe plots below highlight broadband access rates across two key variables: education (percentage of population with a high school diploma or higher) and income (divided into 0-50% and 50-100% brackets). As seen, education and income are both correlated with broadband access, where regions with higher levels of education and income tend to have better broadband penetration.\n\n\n\n\nIncome disparities show some influence on broadband access: higher-income counties generally have higher access rates.\nEducational attainment plays a critical role: counties with higher percentages of high school or bachelor’s degree completions tend to have better broadband access.\nThese findings suggest that systemic barriers, such as affordability and digital literacy, continue to affect broadband adoption, even where infrastructure is available.\n\n\n\n\n\nBroadband access has become essential for education, healthcare, and economic opportunity, yet persistent racial disparities create systemic disadvantages. Our analysis reveals that even after accounting for income and education levels, counties with higher minority populations consistently show lower broadband adoption rates, perpetuating cycles of inequality.\n\n\nBoxplot Analysis of Racial Quartiles (Q1-Q4):\n- Q1: Areas with lowest racial group representation (0-25%)\n- Q4: Areas with highest racial group representation (75-100%)\n\n\n\n\n\n\n\n\n\nRacial Group\nQ1 Access Rate\nQ4 Access Rate\nGap\n\n\n\n\nBlack Communities\n83%\n81%\n-2%\n\n\nHispanic Communities\n80%\n83%\n+3%\n\n\nWhite Communities\n82%\n85%\n+3%\n\n\nAsian Communities\n80%\n90%\n+10%\n\n\n\n\n\n\n\nInfrastructure Desert Effect\n\nMajority-Black counties show 5-6% fewer broadband providers than White-majority counties with comparable population density\n\nAffordability Crisis\n\nCertain Black & Hispanic-majority areas pay up to 7-10% more for equivalent broadband speeds\n\n\n\n“The broadband gap isn’t just about wires and signals—it’s about decades of systemic neglect in community infrastructure.”\n— National Digital Inclusion Alliance\n\n\n\n\n\nOutliers removed using Tukey’s 1.5×IQR method\n\nQuartile analysis based on ACS 2022 demographic data"
  },
  {
    "objectID": "insights.html#access-availability",
    "href": "insights.html#access-availability",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Visual: scatter or map showing mismatch\nInsight: infrastructure alone isn’t enough"
  },
  {
    "objectID": "insights.html#income-education-and-access",
    "href": "insights.html#income-education-and-access",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Visual: scatter/boxplots\nInsight: systemic factors drive usage"
  },
  {
    "objectID": "insights.html#race-and-broadband-inequity-if-added",
    "href": "insights.html#race-and-broadband-inequity-if-added",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Visual: broadband access by race-majority counties\nInsight: racial gaps persist even when controlling for income"
  },
  {
    "objectID": "insights.html#rural-urban-divide",
    "href": "insights.html#rural-urban-divide",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Visual: comparison of connection tiers or access\nInsight: rural communities lag far behind"
  },
  {
    "objectID": "insights.html#recommendations-policy",
    "href": "insights.html#recommendations-policy",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Bullet points drawn from your findings"
  },
  {
    "objectID": "insights.html#availability-vs.-access-mismatch",
    "href": "insights.html#availability-vs.-access-mismatch",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "While broadband infrastructure may be present in many counties, its existence does not guarantee actual adoption by residents. This disconnect highlights systemic barriers—such as affordability, digital literacy, or trust—that prevent households from accessing available services.\n\n\nThis section compares two critical metrics:\n- Fixed broadband availability (measured by FCC Form 477 tiered connection speeds).\n- Household broadband adoption (sourced from the American Community Survey).\nThe accompanying Broadband Adoption Across U.S. States map visually underscores this mismatch. The color-coded ranges reveal stark disparities: while some states achieve adoption rates above 90%, others languish below 60%, despite widespread infrastructure availability.\n\n\n\nFigure 1: State-level broadband adoption rates show significant variation, with clusters of low adoption (&lt;50%) persisting even in well-connected regions.\n\n\n\n\nNotable states with high infrastructure coverage (e.g., over 700 connections per 1,000 housing units) still report adoption rates below 60%.\n\nThis gap signals that non-technical barriers—like cost, lack of digital skills, or low awareness—are likely suppressing subscription rates, even where service is technically available."
  },
  {
    "objectID": "insights.html#income-education-and-access-1",
    "href": "insights.html#income-education-and-access-1",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "While broadband access is critical for social and economic mobility, the rate of adoption is influenced by systemic factors such as income and education. Higher-income households and regions with more educated populations are often better equipped to afford and utilize broadband services. This section explores the connection between median household income, education attainment, and broadband access rates.\n\n\nThis section examines the relationship between the following key metrics:\n- Median household income (from the U.S. Census Bureau). - Educational attainment (percentage of population with high school or bachelor’s degree). - Broadband access rate (percentage of households with broadband access).\nThe accompanying boxplots highlight the distribution of broadband access rates across different education and income brackets. These visualizations underscore how education and income influence broadband access, showing that higher education and income levels correlate with better broadband access.\n\n\n\nFigure 2: A boxplot illustrating the relationship between household income brackets and broadband access rate. Higher income regions tend to have slightly better broadband access.\n\n\n\nFigure 3: A boxplot showing the distribution of broadband access rate based on the percentage of the population with at least a high school diploma. Educational attainment is positively correlated with broadband access.\n\n\n\nThe plots below highlight broadband access rates across two key variables: education (percentage of population with a high school diploma or higher) and income (divided into 0-50% and 50-100% brackets). As seen, education and income are both correlated with broadband access, where regions with higher levels of education and income tend to have better broadband penetration.\n\n\n\n\nIncome disparities show some influence on broadband access: higher-income counties generally have higher access rates.\nEducational attainment plays a critical role: counties with higher percentages of high school or bachelor’s degree completions tend to have better broadband access.\nThese findings suggest that systemic barriers, such as affordability and digital literacy, continue to affect broadband adoption, even where infrastructure is available."
  },
  {
    "objectID": "insights.html#race-and-broadband-inequity-quantifying-the-digital-divide",
    "href": "insights.html#race-and-broadband-inequity-quantifying-the-digital-divide",
    "title": "Key Takeaways and Narratives",
    "section": "",
    "text": "Broadband access has become essential for education, healthcare, and economic opportunity, yet persistent racial disparities create systemic disadvantages. Our analysis reveals that even after accounting for income and education levels, counties with higher minority populations consistently show lower broadband adoption rates, perpetuating cycles of inequality.\n\n\nBoxplot Analysis of Racial Quartiles (Q1-Q4):\n- Q1: Areas with lowest racial group representation (0-25%)\n- Q4: Areas with highest racial group representation (75-100%)\n\n\n\n\n\n\n\n\n\nRacial Group\nQ1 Access Rate\nQ4 Access Rate\nGap\n\n\n\n\nBlack Communities\n83%\n81%\n-2%\n\n\nHispanic Communities\n80%\n83%\n+3%\n\n\nWhite Communities\n82%\n85%\n+3%\n\n\nAsian Communities\n80%\n90%\n+10%\n\n\n\n\n\n\n\nInfrastructure Desert Effect\n\nMajority-Black counties show 5-6% fewer broadband providers than White-majority counties with comparable population density\n\nAffordability Crisis\n\nCertain Black & Hispanic-majority areas pay up to 7-10% more for equivalent broadband speeds\n\n\n\n“The broadband gap isn’t just about wires and signals—it’s about decades of systemic neglect in community infrastructure.”\n— National Digital Inclusion Alliance\n\n\n\n\n\nOutliers removed using Tukey’s 1.5×IQR method\n\nQuartile analysis based on ACS 2022 demographic data"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Sources",
    "section": "",
    "text": "This project integrates data from multiple federal sources to explore broadband access, availability, and equity in the United States.\n\n\n\nSource: U.S. Census Bureau\nURL: https://www.census.gov/data/developers/data-sets/acs-5year.html\nUsed for:\n\nTotal population and household counts\nBroadband access and computer ownership\nIncome, education levels\nRace and ethnicity by county\n\n\n\n\n\n\nSource: Federal Communications Commission\nURL: https://www.fcc.gov/form-477-county-data-internet-access-services\nUsed for:\n\nResidential and total fixed broadband connections\nSpeed tier adoption (e.g. ≥25 Mbps, ≥100 Mbps)\n\n\n\n\n\n\nSource: Federal Communications Commission\nURL: https://www.fcc.gov/form-477-county-data-internet-access-services\nUsed for:\n\nNumber of broadband connections (residential and non-residential)\nHistorical tracking of connection trends\n\n\n\n\n\n\nTables Used:\n\nB02001: Race\nB03003: Hispanic or Latino Origin\n\nDefinitions follow federal standards on race/ethnicity reporting\n\nAll data was retrieved via the U.S. Census Bureau API or from FCC bulk downloads and merged using county FIPS codes for consistency."
  },
  {
    "objectID": "data.html#american-community-survey-acs-5-year-estimates-2022",
    "href": "data.html#american-community-survey-acs-5-year-estimates-2022",
    "title": "Data Sources",
    "section": "",
    "text": "Source: U.S. Census Bureau\nURL: https://www.census.gov/data/developers/data-sets/acs-5year.html\nUsed for:\n\nTotal population and household counts\nBroadband access and computer ownership\nIncome, education levels\nRace and ethnicity by county"
  },
  {
    "objectID": "data.html#fcc-form-477-county-level-internet-access-data-dec-2023",
    "href": "data.html#fcc-form-477-county-level-internet-access-data-dec-2023",
    "title": "Data Sources",
    "section": "",
    "text": "Source: Federal Communications Commission\nURL: https://www.fcc.gov/form-477-county-data-internet-access-services\nUsed for:\n\nResidential and total fixed broadband connections\nSpeed tier adoption (e.g. ≥25 Mbps, ≥100 Mbps)"
  },
  {
    "objectID": "data.html#fcc-form-477-county-level-connection-data-dec-2023",
    "href": "data.html#fcc-form-477-county-level-connection-data-dec-2023",
    "title": "Data Sources",
    "section": "",
    "text": "Source: Federal Communications Commission\nURL: https://www.fcc.gov/form-477-county-data-internet-access-services\nUsed for:\n\nNumber of broadband connections (residential and non-residential)\nHistorical tracking of connection trends"
  },
  {
    "objectID": "data.html#u.s.-census-bureau-race-and-ethnicity-definitions",
    "href": "data.html#u.s.-census-bureau-race-and-ethnicity-definitions",
    "title": "Data Sources",
    "section": "",
    "text": "Tables Used:\n\nB02001: Race\nB03003: Hispanic or Latino Origin\n\nDefinitions follow federal standards on race/ethnicity reporting\n\nAll data was retrieved via the U.S. Census Bureau API or from FCC bulk downloads and merged using county FIPS codes for consistency."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Broadband Internet Access in the US",
    "section": "",
    "text": "https://allenwu.georgetown.domains/broadband_project/insights.html"
  },
  {
    "objectID": "code/data_query.html",
    "href": "code/data_query.html",
    "title": "Query Government Census API for US Census Broadband Data (ACS 5 year estimate, 2022)",
    "section": "",
    "text": "import requests\nimport pandas as pd\nimport time\nfrom pathlib import Path\n\n# Output path (change if needed)\noutput_path = Path(\"../data/census_broadband.csv\")\noutput_path.parent.mkdir(parents=True, exist_ok=True)\n\n# Census variables to query\nvariables = [\n    \"NAME\",              # County name\n    \"B28002_001E\",       # Total households\n    \"B28002_004E\",       # HH with broadband\n    \"B28002_013E\",       # HH with no internet\n    \"B28003_001E\",       # HH with computer\n    \"B28003_004E\",       # HH with computer and broadband\n    \"B01003_001E\",       # Total population\n    \"B19013_001E\"        # Median household income\n]\n\n# Mapping from FIPS to state abbreviations\nfips_to_state = {\n    \"01\": \"AL\", \"02\": \"AK\", \"04\": \"AZ\", \"05\": \"AR\", \"06\": \"CA\", \"08\": \"CO\",\n    \"09\": \"CT\", \"10\": \"DE\", \"11\": \"DC\", \"12\": \"FL\", \"13\": \"GA\", \"15\": \"HI\",\n    \"16\": \"ID\", \"17\": \"IL\", \"18\": \"IN\", \"19\": \"IA\", \"20\": \"KS\", \"21\": \"KY\",\n    \"22\": \"LA\", \"23\": \"ME\", \"24\": \"MD\", \"25\": \"MA\", \"26\": \"MI\", \"27\": \"MN\",\n    \"28\": \"MS\", \"29\": \"MO\", \"30\": \"MT\", \"31\": \"NE\", \"32\": \"NV\", \"33\": \"NH\",\n    \"34\": \"NJ\", \"35\": \"NM\", \"36\": \"NY\", \"37\": \"NC\", \"38\": \"ND\", \"39\": \"OH\",\n    \"40\": \"OK\", \"41\": \"OR\", \"42\": \"PA\", \"44\": \"RI\", \"45\": \"SC\", \"46\": \"SD\",\n    \"47\": \"TN\", \"48\": \"TX\", \"49\": \"UT\", \"50\": \"VT\", \"51\": \"VA\", \"53\": \"WA\",\n    \"54\": \"WV\", \"55\": \"WI\", \"56\": \"WY\"\n}\n\n# Base URL for ACS 5-Year 2022\nbase_url = \"https://api.census.gov/data/2022/acs/acs5\"\n\n# All valid state FIPS codes (01–56, excluding deprecated)\nstate_fips = [\n    f\"{i:02d}\" for i in range(1, 57)\n    if i not in {3, 7, 14, 43, 52}\n]\n\n# Start fetching\nall_data = []\nprint(\"📡 Starting data fetch from Census API...\")\n\nfor fips in state_fips:\n    print(f\"🔍 Querying counties in state FIPS {fips} ({fips_to_state.get(fips, 'Unknown')})...\")\n    params = {\n        \"get\": \",\".join(variables),\n        \"for\": \"county:*\",\n        \"in\": f\"state:{fips}\"\n    }\n    response = requests.get(base_url, params=params)\n    if response.status_code == 200:\n        data = response.json()\n        columns = data[0]\n        rows = data[1:]\n        df = pd.DataFrame(rows, columns=columns)\n        df[\"state_abbr\"] = fips_to_state.get(fips, \"Unknown\")\n        all_data.append(df)\n        print(f\"Retrieved {len(df)} records.\")\n    else:\n        print(f\"Failed for state {fips}: status code {response.status_code}\")\n    time.sleep(0.5)  # throttle requests\n\n# Combine and save\nfinal_df = pd.concat(all_data, ignore_index=True)\nfinal_df.to_csv(output_path, index=False)\nprint(f\"Data saved to: {output_path.resolve()}\")\n\n📡 Starting data fetch from Census API...\n🔍 Querying counties in state FIPS 01 (AL)...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 02 (AK)...\n  ✅ Retrieved 30 records.\n🔍 Querying counties in state FIPS 04 (AZ)...\n  ✅ Retrieved 15 records.\n🔍 Querying counties in state FIPS 05 (AR)...\n  ✅ Retrieved 75 records.\n🔍 Querying counties in state FIPS 06 (CA)...\n  ✅ Retrieved 58 records.\n🔍 Querying counties in state FIPS 08 (CO)...\n  ✅ Retrieved 64 records.\n🔍 Querying counties in state FIPS 09 (CT)...\n  ✅ Retrieved 9 records.\n🔍 Querying counties in state FIPS 10 (DE)...\n  ✅ Retrieved 3 records.\n🔍 Querying counties in state FIPS 11 (DC)...\n  ✅ Retrieved 1 records.\n🔍 Querying counties in state FIPS 12 (FL)...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 13 (GA)...\n  ✅ Retrieved 159 records.\n🔍 Querying counties in state FIPS 15 (HI)...\n  ✅ Retrieved 5 records.\n🔍 Querying counties in state FIPS 16 (ID)...\n  ✅ Retrieved 44 records.\n🔍 Querying counties in state FIPS 17 (IL)...\n  ✅ Retrieved 102 records.\n🔍 Querying counties in state FIPS 18 (IN)...\n  ✅ Retrieved 92 records.\n🔍 Querying counties in state FIPS 19 (IA)...\n  ✅ Retrieved 99 records.\n🔍 Querying counties in state FIPS 20 (KS)...\n  ✅ Retrieved 105 records.\n🔍 Querying counties in state FIPS 21 (KY)...\n  ✅ Retrieved 120 records.\n🔍 Querying counties in state FIPS 22 (LA)...\n  ✅ Retrieved 64 records.\n🔍 Querying counties in state FIPS 23 (ME)...\n  ✅ Retrieved 16 records.\n🔍 Querying counties in state FIPS 24 (MD)...\n  ✅ Retrieved 24 records.\n🔍 Querying counties in state FIPS 25 (MA)...\n  ✅ Retrieved 14 records.\n🔍 Querying counties in state FIPS 26 (MI)...\n  ✅ Retrieved 83 records.\n🔍 Querying counties in state FIPS 27 (MN)...\n  ✅ Retrieved 87 records.\n🔍 Querying counties in state FIPS 28 (MS)...\n  ✅ Retrieved 82 records.\n🔍 Querying counties in state FIPS 29 (MO)...\n  ✅ Retrieved 115 records.\n🔍 Querying counties in state FIPS 30 (MT)...\n  ✅ Retrieved 56 records.\n🔍 Querying counties in state FIPS 31 (NE)...\n  ✅ Retrieved 93 records.\n🔍 Querying counties in state FIPS 32 (NV)...\n  ✅ Retrieved 17 records.\n🔍 Querying counties in state FIPS 33 (NH)...\n  ✅ Retrieved 10 records.\n🔍 Querying counties in state FIPS 34 (NJ)...\n  ✅ Retrieved 21 records.\n🔍 Querying counties in state FIPS 35 (NM)...\n  ✅ Retrieved 33 records.\n🔍 Querying counties in state FIPS 36 (NY)...\n  ✅ Retrieved 62 records.\n🔍 Querying counties in state FIPS 37 (NC)...\n  ✅ Retrieved 100 records.\n🔍 Querying counties in state FIPS 38 (ND)...\n  ✅ Retrieved 53 records.\n🔍 Querying counties in state FIPS 39 (OH)...\n  ✅ Retrieved 88 records.\n🔍 Querying counties in state FIPS 40 (OK)...\n  ✅ Retrieved 77 records.\n🔍 Querying counties in state FIPS 41 (OR)...\n  ✅ Retrieved 36 records.\n🔍 Querying counties in state FIPS 42 (PA)...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 44 (RI)...\n  ✅ Retrieved 5 records.\n🔍 Querying counties in state FIPS 45 (SC)...\n  ✅ Retrieved 46 records.\n🔍 Querying counties in state FIPS 46 (SD)...\n  ✅ Retrieved 66 records.\n🔍 Querying counties in state FIPS 47 (TN)...\n  ✅ Retrieved 95 records.\n🔍 Querying counties in state FIPS 48 (TX)...\n  ✅ Retrieved 254 records.\n🔍 Querying counties in state FIPS 49 (UT)...\n  ✅ Retrieved 29 records.\n🔍 Querying counties in state FIPS 50 (VT)...\n  ✅ Retrieved 14 records.\n🔍 Querying counties in state FIPS 51 (VA)...\n  ✅ Retrieved 133 records.\n🔍 Querying counties in state FIPS 53 (WA)...\n  ✅ Retrieved 39 records.\n🔍 Querying counties in state FIPS 54 (WV)...\n  ✅ Retrieved 55 records.\n🔍 Querying counties in state FIPS 55 (WI)...\n  ✅ Retrieved 72 records.\n🔍 Querying counties in state FIPS 56 (WY)...\n  ✅ Retrieved 23 records.\n✅ Data saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/code/data/census_broadband.csv\n\n\n\nChange Variable Names After Data Retrieval\n\nimport pandas as pd\n\n# Load data\ndf = pd.read_csv(\"../data/census_broadband.csv\")\n\n# Rename columns\ndf = df.rename(columns={\n    \"NAME\": \"county_name\",\n    \"B28002_001E\": \"total_households\",\n    \"B28002_004E\": \"households_with_broadband\",\n    \"B28002_013E\": \"households_with_no_internet\",\n    \"B28003_001E\": \"households_with_computer\",\n    \"B28003_004E\": \"households_with_computer_and_broadband\",\n    \"B01003_001E\": \"total_population\",\n    \"B19013_001E\": \"median_household_income\",\n    \"state\": \"state_fips\",\n    \"county\": \"county_fips\"\n})\n\n# Save cleaned version (optional)\ndf.to_csv(\"../data/census_broadband_cleaned.csv\", index=False)\n\n# Preview\nprint(df.head())\n\n               county_name  total_households  households_with_broadband  \\\n0  Autauga County, Alabama             22308                      19869   \n1  Baldwin County, Alabama             90802                      80742   \n2  Barbour County, Alabama              9016                       6151   \n3     Bibb County, Alabama              7216                       5752   \n4   Blount County, Alabama             21626                      17890   \n\n   households_with_no_internet  households_with_computer  \\\n0                         2111                     22308   \n1                         8127                     90802   \n2                         2194                      9016   \n3                         1391                      7216   \n4                         3243                     21626   \n\n   households_with_computer_and_broadband  total_population  \\\n0                                   19744             58761   \n1                                   80169            233420   \n2                                    6093             24877   \n3                                    5666             22251   \n4                                   17625             59077   \n\n   median_household_income  state_fips  county_fips state_abbr  \n0                    68315           1            1         AL  \n1                    71039           1            3         AL  \n2                    39712           1            5         AL  \n3                    50669           1            7         AL  \n4                    57440           1            9         AL  \n\n\n\n\nClean Our Data Files gathered from [https://www.fcc.gov/form-477-county-data-internet-access-services]\n\nimport pandas as pd\nfrom pathlib import Path\n\n# Load ACS broadband data\nacs_path = Path(\"../data/census_broadband_cleaned.csv\")\nacs_df = pd.read_csv(acs_path, dtype={\"state_fips\": str, \"county_fips\": str})\n\n# Load FCC tier data (decode using ISO-8859-1 due to special characters)\nfcc_path = Path(\"../data/county_tiers_201406_202312.csv\")\nfcc_df = pd.read_csv(fcc_path, encoding=\"ISO-8859-1\")\n\n# Filter FCC data to December 2023\nfcc_df = fcc_df[(fcc_df[\"Year\"] == 2023) & (fcc_df[\"Month\"] == 12)]\n\n# Rename FCC columns for clarity\nfcc_df = fcc_df.rename(columns={\n    \"FIPS\": \"fips_code\",\n    \"Housing_Units\": \"housing_units\",\n    \"Tier_1\": \"connections_200kbps_per_1000\",\n    \"Tier_2\": \"connections_10mbps_per_1000\",\n    \"Tier_3\": \"connections_25mbps_per_1000\",\n    \"Tier_4\": \"connections_100mbps_per_1000\"\n})\n\n# Pad FIPS codes\nfcc_df[\"fips_code\"] = fcc_df[\"fips_code\"].astype(str).str.zfill(5)\nacs_df[\"fips_code\"] = acs_df[\"state_fips\"].str.zfill(2) + acs_df[\"county_fips\"].str.zfill(3)\n\n# Merge ACS and FCC data on fips_code\nmerged_df = pd.merge(acs_df, fcc_df, on=\"fips_code\", how=\"left\")\n\n# Save merged dataset\noutput_path = Path(\"../data/merged_broadband_data.csv\")\nmerged_df.to_csv(output_path, index=False)\n\nprint(f\"Merged dataset saved to: {output_path.resolve()}\")\nprint(f\"Final dataset shape: {merged_df.shape}\")\n\nMerged dataset saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_data.csv\nFinal dataset shape: (3144, 23)\n\n\n\n\nMerge both @ and @\n\nimport pandas as pd\nfrom pathlib import Path\n\n# === Load ACS Data ===\nacs_path = Path(\"../data/census_broadband_cleaned.csv\")\nacs_df = pd.read_csv(acs_path, dtype={\"state_fips\": str, \"county_fips\": str})\nacs_df[\"fips_code\"] = acs_df[\"state_fips\"].str.zfill(2) + acs_df[\"county_fips\"].str.zfill(3)\n\n# === Load FCC Connections Data ===\nfcc_path = Path(\"../data/county_connections_200906_202312.csv\")\nfcc_df = pd.read_csv(fcc_path, encoding=\"ISO-8859-1\")\n\n# Filter to December 2023\nfcc_df = fcc_df[(fcc_df[\"year\"] == 2023) & (fcc_df[\"month\"] == 12)]\n\n# Rename columns\nfcc_df = fcc_df.rename(columns={\n    \"countycode\": \"fips_code\",\n    \"statename\": \"state_name\",\n    \"countyname\": \"county_name\",\n    \"consumer\": \"residential_connections_k\",\n    \"non_consumer\": \"nonresidential_connections_k\",\n    \"all\": \"total_connections_k\"\n})\n\n# Pad FIPS to 5 digits\nfcc_df[\"fips_code\"] = fcc_df[\"fips_code\"].astype(str).str.zfill(5)\n\n# === Merge on fips_code ===\nmerged_df = pd.merge(acs_df, fcc_df, on=\"fips_code\", how=\"left\")\n\n# === Save output ===\noutput_path = Path(\"../data/merged_broadband_connections.csv\")\nmerged_df.to_csv(output_path, index=False)\n\nprint(f\"Merged dataset saved to: {output_path.resolve()}\")\nprint(f\"Final shape: {merged_df.shape}\")\n\nMerged dataset saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_connections.csv\nFinal shape: (3144, 19)\n\n\n\n\nCombine the @ Data to create a Comprehensive Dataset\n\nimport pandas as pd\nfrom pathlib import Path\n\n# === Load ACS Data ===\nacs_path = Path(\"../data/census_broadband_cleaned.csv\")\nacs_df = pd.read_csv(acs_path, dtype={\"state_fips\": str, \"county_fips\": str})\nacs_df[\"fips_code\"] = acs_df[\"state_fips\"].str.zfill(2) + acs_df[\"county_fips\"].str.zfill(3)\n\n# === Load FCC Tier Data ===\ntier_path = Path(\"../data/county_tiers_201406_202312.csv\")\ntier_df = pd.read_csv(tier_path, encoding=\"ISO-8859-1\")\ntier_df = tier_df[(tier_df[\"Year\"] == 2023) & (tier_df[\"Month\"] == 12)]\ntier_df = tier_df.rename(columns={\n    \"FIPS\": \"fips_code\",\n    \"Housing_Units\": \"housing_units\",\n    \"Tier_1\": \"connections_200kbps_per_1000\",\n    \"Tier_2\": \"connections_10mbps_per_1000\",\n    \"Tier_3\": \"connections_25mbps_per_1000\",\n    \"Tier_4\": \"connections_100mbps_per_1000\"\n})\ntier_df[\"fips_code\"] = tier_df[\"fips_code\"].astype(str).str.zfill(5)\n\n# === Load FCC Connection Volume Data ===\nconn_path = Path(\"../data/county_connections_200906_202312.csv\")\nconn_df = pd.read_csv(conn_path, encoding=\"ISO-8859-1\")\nconn_df = conn_df[(conn_df[\"year\"] == 2023) & (conn_df[\"month\"] == 12)]\nconn_df = conn_df.rename(columns={\n    \"countycode\": \"fips_code\",\n    \"statename\": \"state_name\",\n    \"countyname\": \"county_name\",\n    \"consumer\": \"residential_connections_k\",\n    \"non_consumer\": \"nonresidential_connections_k\",\n    \"all\": \"total_connections_k\"\n})\nconn_df[\"fips_code\"] = conn_df[\"fips_code\"].astype(str).str.zfill(5)\n\n# === Merge all datasets ===\nmerged = pd.merge(acs_df, tier_df, on=\"fips_code\", how=\"left\")\nmerged = pd.merge(merged, conn_df[[\n    \"fips_code\", \"year\", \"month\",\n    \"residential_connections_k\", \"nonresidential_connections_k\", \"total_connections_k\"\n]], on=\"fips_code\", how=\"left\")\n\n# === Reorder columns ===\ncolumn_order = [\n    # Location + time\n    \"fips_code\", \"state_fips\", \"county_fips\", \"state_abbr\", \"county_name\", \"year\", \"month\",\n\n    # Demographics\n    \"total_population\", \"median_household_income\",\n\n    # ACS: access + devices\n    \"total_households\", \"households_with_computer\", \"households_with_computer_and_broadband\",\n    \"households_with_broadband\", \"households_with_no_internet\",\n\n    # FCC: availability per 1,000 units\n    \"housing_units\",\n    \"connections_200kbps_per_1000\", \"connections_10mbps_per_1000\",\n    \"connections_25mbps_per_1000\", \"connections_100mbps_per_1000\",\n\n    # FCC: actual connections (volume)\n    \"residential_connections_k\", \"nonresidential_connections_k\", \"total_connections_k\"\n]\n\n# Keep only columns that exist in the merged dataframe\nfinal_columns = [col for col in column_order if col in merged.columns]\nmerged = merged[final_columns]\n\n# === Save final dataset ===\noutput_path = Path(\"../data/merged_broadband_full.csv\")\nmerged.to_csv(output_path, index=False)\n\nprint(f\"Merged dataset saved to: {output_path.resolve()}\")\nprint(f\"Final shape: {merged.shape}\")\n\nMerged dataset saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_full.csv\nFinal shape: (3144, 22)\n\n\n\n\nCreate Additional Variables Based on Actual Broadband Usage\n\nimport pandas as pd\nfrom pathlib import Path\n\n# Load the merged dataset\nmerged_df = pd.read_csv(\"../data/merged_broadband_full.csv\")\n\n# Calculate broadband access rate\nmerged_df[\"broadband_access_rate\"] = (\n    merged_df[\"households_with_broadband\"] / merged_df[\"total_households\"]\n).round(2)\n\n# Calculate residential connections per household\nmerged_df[\"res_conn_per_household\"] = (\n    merged_df[\"residential_connections_k\"] * 1000 / merged_df[\"total_households\"]\n).round(2)\n\n# Save updated dataset\noutput_path = Path(\"../data/merged_broadband_full.csv\")\nmerged_df.to_csv(output_path, index=False)\n\nprint(f\"Merged dataset saved to: {output_path.resolve()}\")\n\nMerged dataset saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_full.csv\n\n\n\nimport requests\nimport pandas as pd\nfrom pathlib import Path\nimport time\n\n# === Clear memory from previous runs ===\nall_data = []\nedu_df = None\n\n# === File paths ===\nacs_path = Path(\"../data/merged_broadband_full.csv\")\nedu_output_path = Path(\"../data/merged_broadband_full.csv\")\n\n# === Load existing dataset ===\ndf_main = pd.read_csv(acs_path, dtype={\"state_fips\": str, \"county_fips\": str})\ndf_main[\"fips_code\"] = df_main[\"state_fips\"].str.zfill(2) + df_main[\"county_fips\"].str.zfill(3)\n\n# === Education variables from ACS B15003 ===\nvariables = [\n    \"NAME\",\n    \"B15003_001E\",  # Total population 25+\n    \"B15003_017E\",  # High school graduate\n    \"B15003_022E\",  # Bachelor's degree\n    \"B15003_025E\"   # Graduate/professional degree\n]\n\nbase_url = \"https://api.census.gov/data/2022/acs/acs5\"\nstate_fips = [f\"{i:02d}\" for i in range(1, 57) if i not in {3, 7, 14, 43, 52}]\n\n# === Robust request function with retries ===\ndef fetch_with_retries(url, params, max_retries=8):\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, params=params, timeout=10)\n            if response.status_code == 200:\n                return response\n            else:\n                print(f\"  Request failed with status {response.status_code}, retrying in {2 ** attempt} seconds...\")\n        except requests.exceptions.RequestException as e:\n            print(f\"  Error: {e}, retrying in {2 ** attempt} seconds...\")\n        time.sleep(2 ** attempt)\n    print(\"  Max retries exceeded. Skipping this state.\")\n    return None\n\n# === Begin pulling ===\nprint(\"Starting education data fetch from Census API...\")\n\nfor fips in state_fips:\n    print(f\"🔍 Querying counties in state FIPS {fips}...\")\n    params = {\n        \"get\": \",\".join(variables),\n        \"for\": \"county:*\",\n        \"in\": f\"state:{fips}\"\n    }\n    response = fetch_with_retries(base_url, params=params)\n    if response:\n        try:\n            rows = response.json()\n            headers = rows[0]\n            data = rows[1:]\n            df = pd.DataFrame(data, columns=headers)\n            df[\"state\"] = fips\n            df[\"fips_code\"] = df[\"state\"].str.zfill(2) + df[\"county\"].str.zfill(3)\n            all_data.append(df)\n            print(f\"Retrieved {len(df)} records.\")\n        except Exception as e:\n            print(f\"  Failed to parse response for state {fips}: {e}\")\n    time.sleep(2)\n\n# === Combine data ===\nedu_df = pd.concat(all_data, ignore_index=True)\nprint(f\"Total counties pulled: {len(edu_df)}\")\n\n# === Convert columns ===\nfor col in [\"B15003_001E\", \"B15003_017E\", \"B15003_022E\", \"B15003_025E\"]:\n    edu_df[col] = pd.to_numeric(edu_df[col], errors=\"coerce\")\n\n# === Compute percentages ===\nedu_df[\"pct_hs_or_higher\"] = (\n    (edu_df[\"B15003_017E\"] + edu_df[\"B15003_022E\"] + edu_df[\"B15003_025E\"]) / edu_df[\"B15003_001E\"]\n).round(2)\n\nedu_df[\"pct_ba_or_higher\"] = (\n    (edu_df[\"B15003_022E\"] + edu_df[\"B15003_025E\"]) / edu_df[\"B15003_001E\"]\n).round(2)\n\n# === Trim and merge ===\nedu_df = edu_df[[\"fips_code\", \"pct_hs_or_higher\", \"pct_ba_or_higher\"]]\ndf_merged = pd.merge(df_main, edu_df, on=\"fips_code\", how=\"left\")\n\n# === Save ===\ndf_merged.to_csv(edu_output_path, index=False)\nprint(f\"Updated dataset with education variables saved to: {edu_output_path.resolve()}\")\n\n📡 Starting education data fetch from Census API...\n🔍 Querying counties in state FIPS 01...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 02...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  ✅ Retrieved 30 records.\n🔍 Querying counties in state FIPS 04...\n  ✅ Retrieved 15 records.\n🔍 Querying counties in state FIPS 05...\n  ✅ Retrieved 75 records.\n🔍 Querying counties in state FIPS 06...\n  ✅ Retrieved 58 records.\n🔍 Querying counties in state FIPS 08...\n  ✅ Retrieved 64 records.\n🔍 Querying counties in state FIPS 09...\n  ✅ Retrieved 9 records.\n🔍 Querying counties in state FIPS 10...\n  ✅ Retrieved 3 records.\n🔍 Querying counties in state FIPS 11...\n  ✅ Retrieved 1 records.\n🔍 Querying counties in state FIPS 12...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 13...\n  ✅ Retrieved 159 records.\n🔍 Querying counties in state FIPS 15...\n  ✅ Retrieved 5 records.\n🔍 Querying counties in state FIPS 16...\n  ✅ Retrieved 44 records.\n🔍 Querying counties in state FIPS 17...\n  ✅ Retrieved 102 records.\n🔍 Querying counties in state FIPS 18...\n  ✅ Retrieved 92 records.\n🔍 Querying counties in state FIPS 19...\n  ✅ Retrieved 99 records.\n🔍 Querying counties in state FIPS 20...\n  ✅ Retrieved 105 records.\n🔍 Querying counties in state FIPS 21...\n  ✅ Retrieved 120 records.\n🔍 Querying counties in state FIPS 22...\n  ✅ Retrieved 64 records.\n🔍 Querying counties in state FIPS 23...\n  ✅ Retrieved 16 records.\n🔍 Querying counties in state FIPS 24...\n  ✅ Retrieved 24 records.\n🔍 Querying counties in state FIPS 25...\n  ✅ Retrieved 14 records.\n🔍 Querying counties in state FIPS 26...\n  ✅ Retrieved 83 records.\n🔍 Querying counties in state FIPS 27...\n  ✅ Retrieved 87 records.\n🔍 Querying counties in state FIPS 28...\n  ✅ Retrieved 82 records.\n🔍 Querying counties in state FIPS 29...\n  ✅ Retrieved 115 records.\n🔍 Querying counties in state FIPS 30...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  ✅ Retrieved 56 records.\n🔍 Querying counties in state FIPS 31...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  ✅ Retrieved 93 records.\n🔍 Querying counties in state FIPS 32...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 4 seconds...\n  ✅ Retrieved 17 records.\n🔍 Querying counties in state FIPS 33...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 4 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 8 seconds...\n  ✅ Retrieved 10 records.\n🔍 Querying counties in state FIPS 34...\n  ✅ Retrieved 21 records.\n🔍 Querying counties in state FIPS 35...\n  ✅ Retrieved 33 records.\n🔍 Querying counties in state FIPS 36...\n  Request failed with status 503, retrying in 1 seconds...\n  ✅ Retrieved 62 records.\n🔍 Querying counties in state FIPS 37...\n  ✅ Retrieved 100 records.\n🔍 Querying counties in state FIPS 38...\n  ✅ Retrieved 53 records.\n🔍 Querying counties in state FIPS 39...\n  ✅ Retrieved 88 records.\n🔍 Querying counties in state FIPS 40...\n  ✅ Retrieved 77 records.\n🔍 Querying counties in state FIPS 41...\n  ✅ Retrieved 36 records.\n🔍 Querying counties in state FIPS 42...\n  ✅ Retrieved 67 records.\n🔍 Querying counties in state FIPS 44...\n  ✅ Retrieved 5 records.\n🔍 Querying counties in state FIPS 45...\n  ✅ Retrieved 46 records.\n🔍 Querying counties in state FIPS 46...\n  ✅ Retrieved 66 records.\n🔍 Querying counties in state FIPS 47...\n  ✅ Retrieved 95 records.\n🔍 Querying counties in state FIPS 48...\n  ✅ Retrieved 254 records.\n🔍 Querying counties in state FIPS 49...\n  ✅ Retrieved 29 records.\n🔍 Querying counties in state FIPS 50...\n  ✅ Retrieved 14 records.\n🔍 Querying counties in state FIPS 51...\n  ✅ Retrieved 133 records.\n🔍 Querying counties in state FIPS 53...\n  ✅ Retrieved 39 records.\n🔍 Querying counties in state FIPS 54...\n  ✅ Retrieved 55 records.\n🔍 Querying counties in state FIPS 55...\n  ✅ Retrieved 72 records.\n🔍 Querying counties in state FIPS 56...\n  ✅ Retrieved 23 records.\n✅ Total counties pulled: 3144\n✅ Updated dataset with education variables saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_full.csv\n\n\n\n\nGather ACS-5 Year Racial Identity Data\n\nimport requests\nimport pandas as pd\nfrom pathlib import Path\nimport time\n\n# === File paths ===\nacs_path = Path(\"../data/merged_broadband_full.csv\")\noutput_path = Path(\"../data/merged_broadband_full.csv\")\n\n# === Load existing dataset ===\ndf_main = pd.read_csv(acs_path, dtype={\"state_fips\": str, \"county_fips\": str})\ndf_main[\"fips_code\"] = df_main[\"state_fips\"].str.zfill(2) + df_main[\"county_fips\"].str.zfill(3)\n\n# === Census variables to pull ===\nvariables = [\n    \"NAME\",\n    \"B02001_001E\",  # Total population\n    \"B02001_002E\",  # White alone\n    \"B02001_003E\",  # Black or African American alone\n    \"B02001_004E\",  # American Indian and Alaska Native alone\n    \"B02001_005E\",  # Asian alone\n    \"B02001_007E\",  # Some other race alone\n    \"B02001_008E\",  # Two or more races\n    \"B03003_003E\"   # Hispanic or Latino\n]\n\nbase_url = \"https://api.census.gov/data/2022/acs/acs5\"\nstate_fips = [f\"{i:02d}\" for i in range(1, 57) if i not in {3, 7, 14, 43, 52}]\nall_data = []\n\n# === Retryable fetch ===\ndef fetch_with_retries(url, params, max_retries=5):\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, params=params, timeout=10)\n            if response.status_code == 200:\n                return response\n            print(f\"  Request failed with status {response.status_code}, retrying...\")\n        except requests.exceptions.RequestException as e:\n            print(f\"  Error: {e}, retrying in {2 ** attempt} seconds...\")\n            time.sleep(2 ** attempt)\n    print(\"  Max retries exceeded. Skipping this state.\")\n    return None\n\n# === Begin pull ===\nprint(\"Starting detailed race and ethnicity data pull...\")\n\nfor fips in state_fips:\n    print(f\"Querying counties in state FIPS {fips}...\")\n    params = {\n        \"get\": \",\".join(variables),\n        \"for\": \"county:*\",\n        \"in\": f\"state:{fips}\"\n    }\n    response = fetch_with_retries(base_url, params=params)\n    if response:\n        try:\n            rows = response.json()\n            headers = rows[0]\n            data = rows[1:]\n            df = pd.DataFrame(data, columns=headers)\n            df[\"state\"] = fips\n            df[\"fips_code\"] = df[\"state\"].str.zfill(2) + df[\"county\"].str.zfill(3)\n            all_data.append(df)\n            print(f\"  Retrieved {len(df)} records.\")\n        except Exception as e:\n            print(f\"  Failed to parse response for state {fips}: {e}\")\n    time.sleep(2)\n\n# === Combine and convert ===\nrace_df = pd.concat(all_data, ignore_index=True)\nprint(f\"Total counties pulled: {len(race_df)}\")\n\n# Convert numeric columns\ncols = [\n    \"B02001_001E\", \"B02001_002E\", \"B02001_003E\",\n    \"B02001_004E\", \"B02001_005E\", \"B02001_007E\",\n    \"B02001_008E\", \"B03003_003E\"\n]\nrace_df[cols] = race_df[cols].apply(pd.to_numeric, errors=\"coerce\")\n\n# === Calculate percent composition ===\nrace_df[\"percent_white_alone\"] = (race_df[\"B02001_002E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_black_alone\"] = (race_df[\"B02001_003E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_native_american_alone\"] = (race_df[\"B02001_004E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_asian_alone\"] = (race_df[\"B02001_005E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_other_race_alone\"] = (race_df[\"B02001_007E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_two_or_more_races\"] = (race_df[\"B02001_008E\"] / race_df[\"B02001_001E\"]).round(2)\nrace_df[\"percent_hispanic_latino\"] = (race_df[\"B03003_003E\"] / race_df[\"B02001_001E\"]).round(2)\n\n# Keep only relevant columns\nrace_df = race_df[[\n    \"fips_code\",\n    \"percent_white_alone\",\n    \"percent_black_alone\",\n    \"percent_native_american_alone\",\n    \"percent_asian_alone\",\n    \"percent_other_race_alone\",\n    \"percent_two_or_more_races\",\n    \"percent_hispanic_latino\"\n]]\n\n# === Merge and save ===\ndf_merged = pd.merge(df_main, race_df, on=\"fips_code\", how=\"left\")\ndf_merged.to_csv(output_path, index=False)\n\nprint(f\"Updated dataset with detailed race and ethnicity variables saved to: {output_path.resolve()}\")\n\nStarting detailed race and ethnicity data pull...\nQuerying counties in state FIPS 01...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Request failed with status 503, retrying...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 4 seconds...\n  Retrieved 67 records.\nQuerying counties in state FIPS 02...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 30 records.\nQuerying counties in state FIPS 04...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 15 records.\nQuerying counties in state FIPS 05...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Retrieved 75 records.\nQuerying counties in state FIPS 06...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 4 seconds...\n  Retrieved 58 records.\nQuerying counties in state FIPS 08...\n  Retrieved 64 records.\nQuerying counties in state FIPS 09...\n  Retrieved 9 records.\nQuerying counties in state FIPS 10...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 3 records.\nQuerying counties in state FIPS 11...\n  Retrieved 1 records.\nQuerying counties in state FIPS 12...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Max retries exceeded with url: /data/2022/acs/acs5?get=NAME%2CB02001_001E%2CB02001_002E%2CB02001_003E%2CB02001_004E%2CB02001_005E%2CB02001_007E%2CB02001_008E%2CB03003_003E&for=county%3A%2A&in=state%3A12 (Caused by NewConnectionError('&lt;urllib3.connection.HTTPSConnection object at 0x7c3ed0accd40&gt;: Failed to establish a new connection: [Errno 101] Network is unreachable')), retrying in 1 seconds...\n  Retrieved 67 records.\nQuerying counties in state FIPS 13...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 159 records.\nQuerying counties in state FIPS 15...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 4 seconds...\n  Retrieved 5 records.\nQuerying counties in state FIPS 16...\n  Retrieved 44 records.\nQuerying counties in state FIPS 17...\n  Retrieved 102 records.\nQuerying counties in state FIPS 18...\n  Retrieved 92 records.\nQuerying counties in state FIPS 19...\n  Retrieved 99 records.\nQuerying counties in state FIPS 20...\n  Retrieved 105 records.\nQuerying counties in state FIPS 21...\n  Retrieved 120 records.\nQuerying counties in state FIPS 22...\n  Retrieved 64 records.\nQuerying counties in state FIPS 23...\n  Retrieved 16 records.\nQuerying counties in state FIPS 24...\n  Retrieved 24 records.\nQuerying counties in state FIPS 25...\n  Retrieved 14 records.\nQuerying counties in state FIPS 26...\n  Retrieved 83 records.\nQuerying counties in state FIPS 27...\n  Retrieved 87 records.\nQuerying counties in state FIPS 28...\n  Retrieved 82 records.\nQuerying counties in state FIPS 29...\n  Retrieved 115 records.\nQuerying counties in state FIPS 30...\n  Retrieved 56 records.\nQuerying counties in state FIPS 31...\n  Retrieved 93 records.\nQuerying counties in state FIPS 32...\n  Retrieved 17 records.\nQuerying counties in state FIPS 33...\n  Retrieved 10 records.\nQuerying counties in state FIPS 34...\n  Retrieved 21 records.\nQuerying counties in state FIPS 35...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 33 records.\nQuerying counties in state FIPS 36...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 62 records.\nQuerying counties in state FIPS 37...\n  Retrieved 100 records.\nQuerying counties in state FIPS 38...\n  Retrieved 53 records.\nQuerying counties in state FIPS 39...\n  Retrieved 88 records.\nQuerying counties in state FIPS 40...\n  Retrieved 77 records.\nQuerying counties in state FIPS 41...\n  Request failed with status 503, retrying...\n  Request failed with status 503, retrying...\n  Retrieved 36 records.\nQuerying counties in state FIPS 42...\n  Retrieved 67 records.\nQuerying counties in state FIPS 44...\n  Retrieved 5 records.\nQuerying counties in state FIPS 45...\n  Request failed with status 503, retrying...\n  Retrieved 46 records.\nQuerying counties in state FIPS 46...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Retrieved 66 records.\nQuerying counties in state FIPS 47...\n  Request failed with status 503, retrying...\n  Retrieved 95 records.\nQuerying counties in state FIPS 48...\n  Request failed with status 503, retrying...\n  Retrieved 254 records.\nQuerying counties in state FIPS 49...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 2 seconds...\n  Request failed with status 503, retrying...\n  Request failed with status 503, retrying...\n  Retrieved 29 records.\nQuerying counties in state FIPS 50...\n  Retrieved 14 records.\nQuerying counties in state FIPS 51...\n  Retrieved 133 records.\nQuerying counties in state FIPS 53...\n  Retrieved 39 records.\nQuerying counties in state FIPS 54...\n  Retrieved 55 records.\nQuerying counties in state FIPS 55...\n  Error: HTTPSConnectionPool(host='api.census.gov', port=443): Read timed out. (read timeout=10), retrying in 1 seconds...\n  Retrieved 72 records.\nQuerying counties in state FIPS 56...\n  Retrieved 23 records.\nTotal counties pulled: 3144\nUpdated dataset with detailed race and ethnicity variables saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_full.csv\n\n\n\n\nRemove the Alaskan Aleutian Islands to Prevent Visualization Issues, also Include Geographic Data for Graphing\n\nimport geopandas as gpd\nimport pandas as pd\nfrom pathlib import Path\n\n# === File paths ===\ncsv_path = Path(\"../data/merged_broadband_full.csv\")\nshp_path = Path(\"../data/cb_2023_us_county_500k/cb_2023_us_county_500k.shp\")\n\n# === Load broadband dataset ===\nprint(\"Loading broadband dataset...\")\ndf = pd.read_csv(csv_path, dtype={\"state_fips\": str, \"county_fips\": str})\ndf[\"fips_code\"] = df[\"state_fips\"].str.zfill(2) + df[\"county_fips\"].str.zfill(3)\nprint(f\"  Loaded {len(df)} broadband records\")\n\n# === Load shapefile ===\nprint(\"Loading county shapefile...\")\ngdf = gpd.read_file(shp_path)\ngdf[\"fips_code\"] = gdf[\"STATEFP\"] + gdf[\"COUNTYFP\"]\nprint(f\"  Loaded {len(gdf)} geometries\")\n\n# === Merge datasets ===\nprint(\"Merging broadband data with geometries...\")\nmerged_gdf = gdf.merge(df, on=\"fips_code\", how=\"left\")\nprint(f\"  Merged shape: {merged_gdf.shape}\")\n\n# === Remove Aleutians ===\nprint(\"Removing Aleutian Islands (FIPS 02013, 02016)...\")\nmerged_gdf = merged_gdf[~merged_gdf[\"fips_code\"].isin([\"02013\", \"02016\"])]\nprint(f\"Final shape after filter: {merged_gdf.shape}\")\n\n# === Save updated CSV ===\noutput_csv_path = Path(\"../data/merged_broadband_full.csv\")\nmerged_gdf.drop(columns=\"geometry\").to_csv(output_csv_path, index=False)\nprint(f\"Updated dataset saved to: {output_csv_path.resolve()}\")\n\nLoading broadband dataset...\n  Loaded 3144 broadband records\nLoading county shapefile...\n  Loaded 3235 geometries\nMerging broadband data with geometries...\n  Merged shape: (3235, 46)\nRemoving Aleutian Islands (FIPS 02013, 02016)...\nFinal shape after filter: (3233, 46)\nUpdated dataset saved to: /home/platinumfish/Desktop/Coding_projects/data_visualization_project_2025/data/merged_broadband_full.csv"
  }
]