[
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "The Rising Threat to Humanitarians",
    "section": "",
    "text": "This timeline shows yearly recorded attacks between 1997 and 2024, revealing a sharp escalation over time. Each peak corresponds to significant geopolitical turning points:\nThese peaks highlight how violence against aid workers mirrors — and sometimes precedes — geopolitical volatility. The humanitarian space is shrinking not due to lack of will, but due to mounting and intentional threats (Outcomes 2023).\nUnderstanding these patterns is essential. Not just for crisis forecasting, but for shaping protection protocols, negotiating access, and upholding the humanitarian principles of neutrality and impartiality in an era of increasing polarization."
  },
  {
    "objectID": "introduction.html#casualty-comparison-national-vs.-international-staff",
    "href": "introduction.html#casualty-comparison-national-vs.-international-staff",
    "title": "The Rising Threat to Humanitarians",
    "section": "Casualty Comparison: National vs. International Staff",
    "text": "Casualty Comparison: National vs. International Staff\nNot all aid workers face the same level of danger.\nThis visualization shows total fatalities by year, broken down by national and international staff. The disparity is stark: national employees consistently suffer the vast majority of deaths (Outcomes 2023). In many years, they account for more than 85% of all humanitarian fatalities.\nThis is not incidental — it reflects structural inequalities in how international missions operate:\n\nNational staff are more likely to be deployed in volatile zones and during peak risk periods.\nThey often receive less protective equipment, medical coverage, or evacuation support.\nIn conflict areas, national staff may be perceived as legitimate political targets, especially if linked to foreign organizations.\n\n\nIn short: the closer you live to the crisis, the more dangerous it is to help.\n\nThis is a central challenge for humanitarian protection strategy — one that data like this makes impossible to ignore."
  },
  {
    "objectID": "introduction.html#animated-fatalities-timeline",
    "href": "introduction.html#animated-fatalities-timeline",
    "title": "The Rising Threat to Humanitarians",
    "section": "Animated Fatalities Timeline",
    "text": "Animated Fatalities Timeline\n\n\nInterpretation:\nThis animation shows how fatalities among aid workers fluctuate sharply in response to geopolitical crises. A notable surge is visible beginning in October / November 2023, coinciding with the outbreak of the Israel–Gaza war, renewed civil violence in Sudan, and intensified instability in Myanmar (News 2023; OCHA 2023). These overlapping crises led to increased field deployments under unsafe conditions and a rise in direct targeting of humanitarian staff — especially national workers operating in high-risk zones.\nSuch temporal spikes emphasize the need for real-time risk intelligence and flexible security protocols that respond as fast as conflict evolves (Outcomes 2023)."
  },
  {
    "objectID": "introduction.html#animated-injuries-barchart",
    "href": "introduction.html#animated-injuries-barchart",
    "title": "The Rising Threat to Humanitarians",
    "section": "Animated Injuries Barchart",
    "text": "Animated Injuries Barchart\n\n\nInterpretation:\nThe injuries chart reflects similar volatility, with a dramatic escalation around Fall 2023. The sharp rise in national staff wounded during this period may reflect increasing use of indiscriminate tactics (e.g., shelling, convoy ambushes) in urban conflict zones like Khartoum and Gaza City, where aid groups were still attempting to maintain access (Event Data Project (ACLED) 2023; News 2023).\nThe data here reinforces a dangerous truth: even when fatalities are avoided, humanitarian operations increasingly result in physical harm — with national staff again disproportionately affected (Outcomes 2023)."
  },
  {
    "objectID": "introduction.html#why-timing-matters",
    "href": "introduction.html#why-timing-matters",
    "title": "The Rising Threat to Humanitarians",
    "section": "Why Timing Matters",
    "text": "Why Timing Matters\nPatterns of violence against humanitarian workers are not random — they follow the rhythms of war, collapse, and power shifts. Each surge in attacks tells us not just where the world is unstable, but when the cost of compassion becomes highest.\nWhat this timeline shows is that early warning isn’t just for states — it’s vital for those who deliver medicine, food, and protection. Humanitarian organizations need not only courage, but foresight: the ability to read risk in the data before it reaches the field.\nBy mapping the past, we are not just documenting loss — we are building the scaffolding for:\n\n\nProactive Protection. Smarter Deployment of Humanitarian Aid.\n\n\nA Deeper Respect for Those Who Risk Everything to Serve Others."
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Implications & Actions",
    "section": "",
    "text": "The trends mapped across this project are not abstract. They represent: - Dozens of lives lost every year — often uncounted, underreported, and unresolved. - A shrinking humanitarian space, where aid delivery is disrupted by threat, bureaucracy, or deliberate attack. - A predictable pattern of escalation — where every spike in conflict is followed by harm to aid workers within months."
  },
  {
    "objectID": "conclusion.html#from-data-to-urgency",
    "href": "conclusion.html#from-data-to-urgency",
    "title": "Implications & Actions",
    "section": "",
    "text": "The trends mapped across this project are not abstract. They represent: - Dozens of lives lost every year — often uncounted, underreported, and unresolved. - A shrinking humanitarian space, where aid delivery is disrupted by threat, bureaucracy, or deliberate attack. - A predictable pattern of escalation — where every spike in conflict is followed by harm to aid workers within months."
  },
  {
    "objectID": "conclusion.html#escalating-risk-across-humanitarian-hotspots",
    "href": "conclusion.html#escalating-risk-across-humanitarian-hotspots",
    "title": "Implications & Actions",
    "section": "Escalating Risk Across Humanitarian Hotspots",
    "text": "Escalating Risk Across Humanitarian Hotspots\n\n\n\nThis timeline tracks the top 5 most dangerous countries for aid workers from 1997 to 2024. Each line tells a story of escalating risk:\n\nAfghanistan shows sustained volatility, with attack frequency surging during NATO withdrawal and Taliban resurgence.\nSouth Sudan and Sudan exhibit overlapping crisis waves tied to civil wars and governance collapse.\nSyria enters sharply during the 2010s, coinciding with siege warfare and regional destabilization.\nSomalia maintains high threat levels due to insurgency and fragmented rule.\n\nThese curves are not just historical — they are predictive. When conflict intensifies, attacks on humanitarians follow. The data underscores the urgent need for real-time forecasting, smarter deployment protocols, and early warning systems that treat aid worker violence as a leading indicator — not just a tragic consequence."
  },
  {
    "objectID": "conclusion.html#countries-with-shrinking-humanitarian-access",
    "href": "conclusion.html#countries-with-shrinking-humanitarian-access",
    "title": "Implications & Actions",
    "section": "Countries with Shrinking Humanitarian Access",
    "text": "Countries with Shrinking Humanitarian Access\n\n\n\nThis visualization identifies countries where humanitarian access has sharply declined based on a drop in reported security incidents between 2020 and 2024.\n\nSyria and South Sudan top the list, reflecting growing operational constraints, reduced reporting, or complete withdrawal from certain regions.\nThe Central African Republic, Mali, and Afghanistan also show notable contractions, suggesting that access limitations are worsening precisely where need is rising.\nWhile reduced incident counts may seem positive at first glance, in many cases they reflect gaps in visibility, monitoring, or secure access — not safer environments.\n\nThese findings highlight the growing blind spots in humanitarian coverage, where aid is most critical but least feasible to deliver."
  },
  {
    "objectID": "conclusion.html#the-funnel-of-impunity",
    "href": "conclusion.html#the-funnel-of-impunity",
    "title": "Implications & Actions",
    "section": "The Funnel of Impunity",
    "text": "The Funnel of Impunity\n\n\nThis funnel visualization traces the systemic attrition from harm to justice. Despite thousands of reported attacks on humanitarian personnel:\n\nFewer than 25 cases result in any form of legal accountability.\nThe drop-off between “Aid Workers Affected” and “Investigations Opened” reveals a broken reporting and enforcement system.\nMedical evacuations are rare, and when they happen, they are not necessarily followed by investigation or redress.\n\nThe gradient itself serves as a metaphor: the darker the color, the more severe the failure — reminding us that most pathways toward justice fade long before they reach their destination."
  },
  {
    "objectID": "conclusion.html#legal-milestones-that-shaped-humanitarian-protection",
    "href": "conclusion.html#legal-milestones-that-shaped-humanitarian-protection",
    "title": "Implications & Actions",
    "section": "Legal Milestones That Shaped Humanitarian Protection",
    "text": "Legal Milestones That Shaped Humanitarian Protection\n\n\n\nThis timeline tracks key legal resolutions and geopolitical shifts that have reshaped the landscape of humanitarian protection over the past 25 years. From the 1999 UNSC Resolution on Civilians in Conflict to the 2023 Gaza escalation, each inflection point reflects a growing urgency to protect aid workers amidst rising hostilities.\nNotably: - The Canal Hotel Bombing in Iraq (2003) marked a turning point for the UN’s operational security posture. - The 2021 collapse of Afghanistan and 2023 Gaza war triggered steep increases in direct targeting of aid staff.\nThese milestones are not just historic — they shape field policy, mission design, and protection norms for years to follow."
  },
  {
    "objectID": "conclusion.html#patterns-of-failure-mandates-for-change",
    "href": "conclusion.html#patterns-of-failure-mandates-for-change",
    "title": "Implications & Actions",
    "section": "Patterns of Failure, Mandates for Change",
    "text": "Patterns of Failure, Mandates for Change\nThree hard truths emerge from the global data on aid worker attacks:\n\nRisk Rises Faster Than Protection\nAs conflict expands, attacks on humanitarian workers escalate almost immediately. Our timelines show this clearly: escalation in Sudan, Gaza, or Afghanistan is quickly followed by harm to those delivering aid. Protection frameworks must move faster — with anticipatory deployment, real-time threat monitoring, and crisis forecasting embedded into humanitarian strategy.\nJustice Is the Exception, Not the Norm\nFrom thousands of recorded attacks, only a handful reach investigation — let alone prosecution. The accountability funnel reveals a systemic attrition of justice. International legal norms are strong on paper, but impunity dominates in practice. This must shift toward enforceable legal guarantees, support for survivor testimony, and expanded protection under international humanitarian law (Red Cross (ICRC) 2023).\nAccess ≠ Safety\nInsecurity is not the only barrier. The shrinking of humanitarian access in countries like Syria, CAR, and South Sudan is driven by bureaucratic obstruction, violence, and fear of retaliation. A place may be accessible — but not operationally viable. Global humanitarian planning must distinguish between geographic access and functional safety — and fight for both.\n\n\n\n“Data without response is indifference by design.”\n\n\nWe must treat violence against aid workers not as an inevitability — but as a failure of collective will.\n\n\n— Humanitarian Security Annual Report 2024 (Outcomes 2023)"
  },
  {
    "objectID": "attacks.html",
    "href": "attacks.html",
    "title": "Methods of Violence & Attack Contexts",
    "section": "",
    "text": "Humanitarian work is dangerous not just because of where it’s done — but how those who serve are targeted. This section explores the weapons, tactics, and circumstances behind attacks on aid workers.\nFrom roadside ambushes to raids on compounds, the dataset reveals stark patterns. Certain methods like shootings and kidnappings occur frequently, while others — IEDs and landmines — are less common but far more deadly. The context of these attacks also matters: are they premeditated raids, spontaneous mob violence, or the result of indiscriminate warfare?"
  },
  {
    "objectID": "attacks.html#most-common-methods-of-attack",
    "href": "attacks.html#most-common-methods-of-attack",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Most Common Methods of Attack",
    "text": "Most Common Methods of Attack\n\n\n\nThis visualization shows the top methods used to target aid workers between 1997 and 2024. Shootings, kidnappings, and bodily assaults dominate the threat landscape — often occurring during field movement or in insecure urban environments.\nNotably, while methods like IEDs, bombings, and sexual violence appear less frequently, they are often more deadly or traumatic in effect. The diversity of methods also reflects regional conflict dynamics, ranging from guerrilla warfare to criminal targeting."
  },
  {
    "objectID": "attacks.html#most-lethal-methods-of-attack",
    "href": "attacks.html#most-lethal-methods-of-attack",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Most Lethal Methods of Attack",
    "text": "Most Lethal Methods of Attack\n\n\n\nThis lollipop chart compares the average fatalities per incident across all attack methods from 1997 to 2024. Each method is represented by a vertical line and a dot, with dot size scaled to the total number of reported incidents.\nKey insights: - Aerial bombardment, complex attacks, and landmines rank among the most lethal on a per-incident basis — even if relatively rare. - Shootings and kidnappings, while more common, result in fewer fatalities per attack on average. - The visual contrast between frequency (dot size) and severity (length of line) helps distinguish methods that are frequent but less deadly vs. rare but devastating.\nThis view reveals a critical operational insight: the most common threats aren’t always the deadliest — and vice versa — requiring nuanced mitigation strategies that address both prevalence and potential impact."
  },
  {
    "objectID": "attacks.html#changing-patterns-of-violence-attack-contexts-over-time",
    "href": "attacks.html#changing-patterns-of-violence-attack-contexts-over-time",
    "title": "Methods of Violence & Attack Contexts",
    "section": "Changing Patterns of Violence: Attack Contexts Over Time",
    "text": "Changing Patterns of Violence: Attack Contexts Over Time\n\n\n\nThis stacked area chart tracks how the tactics used against humanitarian workers have evolved between 1997 and 2024.\nKey insights from the visualization:\n\nAmbushes have consistently dominated the threat landscape, reflecting rising dangers during transit and supply missions.\nRaids on compounds and project sites surged in the early 2000s — especially in conflict zones like Iraq, Sudan, and Somalia — and appear to be resurging in recent years.\nCheckpoints and crossfire incidents remain persistent, highlighting the blurred lines between combatants and civilians in contested areas.\nThe diversity of tactics has grown over time, reflecting increasingly complex, targeted, and premeditated forms of violence.\n\nUnderstanding these shifting contexts helps operational planners anticipate not just where, but how aid workers are likely to be attacked — and build protection protocols accordingly."
  },
  {
    "objectID": "attacks.html#the-mechanics-of-targeting",
    "href": "attacks.html#the-mechanics-of-targeting",
    "title": "Methods of Violence & Attack Contexts",
    "section": "The Mechanics of Targeting",
    "text": "The Mechanics of Targeting\nThree systemic patterns emerge from how aid workers are attacked:\n\nPredictable Contexts, Vulnerable Moments\nAid workers are most often targeted in ambushes, checkpoints, and compound raids — not random attacks, but scenarios where they are highly visible and minimally protected. Transit routes, office sites, and aid distribution hubs remain the most common flashpoints.\nDisproportionate Lethality of Rare Tactics\nWhile shootings and bodily assaults dominate numerically, it is the less frequent methods — like aerial bombardments, landmines, and complex attacks — that account for the highest death tolls per incident (Outcomes 2023; Red Cross (ICRC) 1997).\nShifting Tactical Landscapes\nThe timeline shows that new contexts emerge as conflict dynamics evolve. The 2000s saw a rise in compound raids, the 2010s in roadside ambushes, and the 2020s are now marked by complex hybrid attacks and sieges on urban health facilities ((MSF) 2017; News 2023).\n\n\n\n“It’s not just where violence happens —\n\n\nbut how and when that define the humanitarian threat.”\n\n\n— Humanitarian Security Annual Report 2023 (Outcomes 2023)"
  },
  {
    "objectID": "geography.html",
    "href": "geography.html",
    "title": "Geography of Danger",
    "section": "",
    "text": "This interactive map shows incident concentrations from 1997–2024. Darker regions reflect higher risk for humanitarian operations (Outcomes 2023)."
  },
  {
    "objectID": "geography.html#global-heatmap-where-aid-workers-are-most-at-risk",
    "href": "geography.html#global-heatmap-where-aid-workers-are-most-at-risk",
    "title": "Geography of Danger",
    "section": "",
    "text": "This interactive map shows incident concentrations from 1997–2024. Darker regions reflect higher risk for humanitarian operations (Outcomes 2023)."
  },
  {
    "objectID": "geography.html#conflict-typologies-field-realities",
    "href": "geography.html#conflict-typologies-field-realities",
    "title": "Geography of Danger",
    "section": "Conflict Typologies & Field Realities",
    "text": "Conflict Typologies & Field Realities\nHumanitarian threats often reflect political environments:\n\nPost-9/11 War Zones\nAfghanistan, Iraq, and Pakistan saw spikes due to blurred civil-military boundaries and insurgency targeting (Event Data Project (ACLED) 2023).\nAfrican Civil Wars\n80% of victims are national staff; aid is blocked or weaponized during unrest (e.g., South Sudan, Sudan, Mali) ((MSF) 2017).\nState Collapse\nSyria and Haiti show how lawless zones foster gang/warlord rule and complex violence (News 2023).\nAuthoritarian Crackdowns\nMyanmar and Ethiopia restrict aid legally or violently post-2021 (Outcomes 2023).\nSpillover Conflicts\nBorder insecurity drives attacks in Kenya, Cameroon, and Uganda (UNHCR 2022)."
  },
  {
    "objectID": "geography.html#animated-globe-of-aid-worker-attacks-19972024",
    "href": "geography.html#animated-globe-of-aid-worker-attacks-19972024",
    "title": "Geography of Danger",
    "section": "Animated Globe of Aid Worker Attacks (1997–2024)",
    "text": "Animated Globe of Aid Worker Attacks (1997–2024)\n\n\nThis animated globe presents a dynamic view of where humanitarian workers have been most at risk over the last three decades.\n\nEarly hotspots emerge across East Africa and Central Asia in the late 1990s.\nBy the mid-2000s, incidents surge in Iraq, Sudan, and DR Congo — coinciding with conflict escalation and UN deployments.\nIn the 2010s, the rise of ISIS, Syrian civil war, and Yemen crisis shift the map eastward.\nBy 2020–2024, the globe shows intensified activity in Afghanistan, Palestine, and Myanmar, reflecting modern frontline risk.\n\nThe orthographic projection emphasizes global curvature — making regional clusters and geographic escalation patterns easier to observe as the world spins forward in time."
  },
  {
    "objectID": "geography.html#case-study-highlights",
    "href": "geography.html#case-study-highlights",
    "title": "Geography of Danger",
    "section": "Case Study Highlights",
    "text": "Case Study Highlights\n\n\nAfghanistan (#1 in Attacks)\n- 142 attacks on female aid workers (2021–2023)\n- 38% of attacks post-Taliban resurgence targeted women\n- 60% decline in women-led operations (English 2021)\n\n\n\nAfghan women protest Taliban restrictions\n\n\n\nHaiti (#16 in Attacks)\n- Gangs control 80% of Port-au-Prince\n- 70+ convoy attacks; 400% rise in kidnappings\n- Aid presence has retreated from 60% of zones (News 2023)\n\n\n\nArmed Haitian gangs control neighborhoods"
  },
  {
    "objectID": "geography.html#the-cartography-of-risk",
    "href": "geography.html#the-cartography-of-risk",
    "title": "Geography of Danger",
    "section": "The Cartography of Risk",
    "text": "The Cartography of Risk\n\nPower Vacuum Targeting\n73% of attacks cluster after regime change (e.g., Afghanistan, Haiti).\nWeaponized Access\nAid is deliberately blocked or attacked — a new form of strategic denial (Red Cross (ICRC) 2023).\nClimate-Conflict Nexus\nThe Sahel, Ethiopia, and Sudan face layered crises of drought and violence (UNHCR 2022).\n\n\n\n“We’re not just mapping where attacks happen…\n\n\nbut where the concept of humanitarian neutrality is under assault.”\n\n\n— Humanitarian Security Annual Report 2024 (Outcomes 2023)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nUnrequited Aid: The Intimate Struggle of Humanitarian Work\n",
    "section": "",
    "text": "2025 Georgetown Data Science & Analytics Project"
  },
  {
    "objectID": "index.html#implications-of-our-research",
    "href": "index.html#implications-of-our-research",
    "title": "\nUnrequited Aid: The Intimate Struggle of Humanitarian Work\n",
    "section": "Implications of Our Research",
    "text": "Implications of Our Research\nHumanitarian access is not just constrained by conflict—it’s under attack.\nBetween 1997 and 2025, over 4,300 incidents of violence against aid workers have been recorded across 90+ countries. The data reveals a grim pattern:\n\nNational staff face over 80% of fatalities and kidnappings, often without adequate protection.\nAmbushes and roadside attacks are the most frequent and deadly contexts.\nNon-state armed groups — including the Taliban, Al-Itihaad, and LRA — are key perpetrators, driven by political motives or ransom demands.\nMost incidents occur in Somalia, Sudan, Afghanistan, Iraq, and DRC, with spikes aligned to major geopolitical events.\nA significant number of attacks remain unverified and unpunished, reflecting legal and accountability gaps.\n\n\n\nThese are not isolated tragedies…\n\n\nthey represent a systemic failure to protect those who serve.\n\n\nThis project provides a foundation for: - Risk-aware operational planning - Targeted protections for national staff - Policy advocacy grounded in field-level data\nWhat emerges is not just a dataset — but a map of global vulnerability, and a call to safeguard humanitarian space."
  },
  {
    "objectID": "code/eda.html",
    "href": "code/eda.html",
    "title": "Introduction.qmd",
    "section": "",
    "text": "import pandas as pd\nimport plotly.express as px\n\n# Load your dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")  # adjust path if needed\n\n# Filter to valid coordinates\ndf_map = df.dropna(subset=[\"Latitude\", \"Longitude\"])\n\n# Create the interactive map\nfig = px.scatter_geo(\n    df_map,\n    lat=\"Latitude\",\n    lon=\"Longitude\",\n    hover_name=\"Country\",\n    hover_data={\n        \"Year\": True,\n        \"City\": True,\n        \"Means of attack\": True,\n        \"Actor name\": True\n    },\n    opacity=0.4,\n    color_discrete_sequence=[\"red\"],\n    title=\"Global Incident Heatmap of Attacks on Humanitarian Workers (1997–2025)\"\n)\n\nfig.update_layout(\n    geo=dict(showland=True, landcolor=\"rgb(240, 240, 240)\", showcountries=True),\n    title_font_size=20,\n    margin={\"r\":0,\"t\":50,\"l\":0,\"b\":0}\n)\n\nfig.show()\n\n\n  Cell In[6], line 13\n    color=\"#1fff5a\"\n          ^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import font_manager\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# ======================\n# DATA PREPARATION\n# ======================\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[df['Year'] != 2025]  # Remove future year\nyearly = df.groupby(\"Year\").size().reset_index(name=\"Incident Count\")\n\n# Normalize years for color mapping\nnorm = mcolors.Normalize(vmin=yearly[\"Year\"].min(), vmax=yearly[\"Year\"].max())\ncmap = cm.get_cmap(\"magma\")\n\n# ======================\n# VISUALIZATION\n# ======================\nplt.figure(figsize=(9, 6), dpi=120)\n\n# Draw line segments between each point, colored by year\nfor i in range(1, len(yearly)):\n    x_vals = [yearly[\"Year\"].iloc[i - 1], yearly[\"Year\"].iloc[i]]\n    y_vals = [yearly[\"Incident Count\"].iloc[i - 1], yearly[\"Incident Count\"].iloc[i]]\n    color = cmap(norm(yearly[\"Year\"].iloc[i]))\n    plt.plot(x_vals, y_vals, color=color, linewidth=4.5, zorder=1)\n\n# Plot each point with its own color\nfor i, row in yearly.iterrows():\n    plt.scatter(\n        row[\"Year\"], row[\"Incident Count\"],\n        color=cmap(norm(row[\"Year\"])),\n        edgecolor=\"black\",\n        s=120,\n        zorder=2\n    )\n\n# Highlight specific years\nhighlight_years = [1997, 2008, 2013, 2024]\nhighlight_data = yearly[yearly['Year'].isin(highlight_years)]\nfor _, row in highlight_data.iterrows():\n    plt.scatter(\n        row['Year'],\n        row['Incident Count'],\n        color='#ff3d8b',\n        s=140,\n        edgecolor='black',\n        zorder=5\n    )\n    plt.annotate(\n        f\"{row['Incident Count']}\",\n        xy=(row['Year'], row['Incident Count']),\n        xytext=(0, 10),\n        textcoords='offset points',\n        fontsize=11,\n        weight='bold',\n        ha='center',\n        color='#d7191c'\n    )\n\n# Titles and styling\nplt.title(\n    \"Reported Attacks on Humanitarian Workers (1997–2024)\",\n    fontsize=17, fontweight='bold', pad=20\n)\nplt.xlabel(\"Year\", fontsize=14, labelpad=12)\nplt.ylabel(\"Number of Attacks / Incidents\", fontsize=14, labelpad=12)\n\n# Bold axis labels\nplt.xlabel(\"Year\", fontsize=14, labelpad=12, fontweight='bold')\nplt.ylabel(\"Number of Attacks / Incidents\", fontsize=14, labelpad=12, fontweight='bold')\n\n# Thicker, white axis lines\nax = plt.gca()\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\n\n\neven_years = [year for year in yearly['Year'] if year % 2 == 0]\nplt.xticks(even_years, rotation=45 if len(even_years) &gt; 8 else 0)\nplt.tick_params(axis='both', which='major', labelsize=12)\n\nfor spine in ['top', 'right']:\n    plt.gca().spines[spine].set_visible(False)\n# Gentle lavender background\nplt.gca().set_facecolor('#f2e8ff')\n\nax = plt.gca()\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\nax.spines['left'].set_linewidth(1.2)\nax.spines['bottom'].set_linewidth(1.2)\nax.spines['left'].set_color('white')\nax.spines['bottom'].set_color('white')\n\n\n# ======================\n# SAVE OUTPUT\n# ======================\nos.makedirs('../assets/introduction', exist_ok=True)\nplt.tight_layout()\nplt.savefig(\n    '../assets/introduction/timeline_attacks.png',\n    bbox_inches='tight',\n    dpi=120,\n    facecolor=plt.gca().get_facecolor(),\n    transparent=False\n)\nplt.show()\n\n/tmp/ipykernel_16962/4145160311.py:24: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\nfindfont: Font family 'Inconsolata' not found.\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Filter valid years and months\ndf = df[(df[\"Year\"].between(1997, 2024)) & (~df[\"Month\"].isna())]\ndf[\"Month\"] = df[\"Month\"].astype(int)\ndf[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\"]].assign(Day=1))\n\n# Fill NA in casualty columns\ncasualty_cols = [\n    \"Nationals killed\", \"Internationals killed\",\n    \"Nationals wounded\", \"Internationals wounded\"\n]\ndf[casualty_cols] = df[casualty_cols].fillna(0)\n\n# Group by month\nmonthly_group = df.groupby(\"Date\")[\n    [\"Nationals killed\", \"Internationals killed\", \"Nationals wounded\", \"Internationals wounded\"]\n].sum().reset_index()\n\n# Melt for fatalities\nkilled_melted = monthly_group.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals killed\", \"Internationals killed\"],\n    var_name=\"Group\",\n    value_name=\"Fatalities\"\n)\n\n# Melt for wounded\nwounded_melted = monthly_group.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals wounded\", \"Internationals wounded\"],\n    var_name=\"Group\",\n    value_name=\"Wounded\"\n)\n\n# Animated bar chart for fatalities\nfig_killed = px.bar(\n    killed_melted,\n    x=\"Group\",\n    y=\"Fatalities\",\n    animation_frame=killed_melted[\"Date\"].dt.strftime(\"%b %Y\"),\n    range_y=[0, killed_melted[\"Fatalities\"].max() + 5],\n    color=\"Group\",\n    title=\"Monthly Aid Worker Fatalities Over Time (1997–2024)\",\n    color_discrete_map={\n        \"Nationals killed\": \"#d62728\",\n        \"Internationals killed\": \"#1f77b4\"\n    }\n)\n\n# Animated bar chart for wounded\nfig_wounded = px.bar(\n    wounded_melted,\n    x=\"Group\",\n    y=\"Wounded\",\n    animation_frame=wounded_melted[\"Date\"].dt.strftime(\"%b %Y\"),\n    range_y=[0, wounded_melted[\"Wounded\"].max() + 5],\n    color=\"Group\",\n    title=\"Monthly Aid Worker Injuries Over Time (1997–2024)\",\n    color_discrete_map={\n        \"Nationals wounded\": \"#d62728\",\n        \"Internationals wounded\": \"#1f77b4\"\n    }\n)\n\n# Ensure output folder exists\noutput_dir = \"../assets/introduction\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Save as HTML\nfatalities_path = f\"{output_dir}/timeline_fatalities.html\"\nwounded_path = f\"{output_dir}/timeline_wounded.html\"\nfig_killed.write_html(fatalities_path)\nfig_wounded.write_html(wounded_path)\n\nfatalities_path, wounded_path\n\n('../assets/introduction/timeline_fatalities.html',\n '../assets/introduction/timeline_wounded.html')\n\n\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load and prep data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[(df[\"Year\"].between(1997, 2024)) & (~df[\"Month\"].isna())]\ndf[\"Month\"] = df[\"Month\"].astype(int)\ndf[\"Date\"] = pd.to_datetime(df[[\"Year\", \"Month\"]].assign(Day=1))\n\n# Fill missing values\ncasualty_cols = [\n    \"Nationals killed\", \"Internationals killed\",\n    \"Nationals wounded\", \"Internationals wounded\"\n]\ndf[casualty_cols] = df[casualty_cols].fillna(0)\n\n# Group monthly totals\nmonthly = df.groupby(\"Date\")[casualty_cols].sum().reset_index()\n\n# Convert to long format\nfatalities_long = monthly.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals killed\", \"Internationals killed\"],\n    var_name=\"Group\",\n    value_name=\"Fatalities\"\n)\n\nwounded_long = monthly.melt(\n    id_vars=\"Date\",\n    value_vars=[\"Nationals wounded\", \"Internationals wounded\"],\n    var_name=\"Group\",\n    value_name=\"Wounded\"\n)\n\n# Use readable string frame but cumulative by actual Date\ndef expand_cumulative(df, value_col):\n    frames = []\n    unique_frames = df[\"Date\"].sort_values().unique()\n    for i, date in enumerate(unique_frames):\n        frame_df = df[df[\"Date\"] &lt;= date].copy()\n        frame_df[\"Frame\"] = date.strftime(\"%b %Y\")  # readable frame\n        frames.append(frame_df)\n    return pd.concat(frames)\n\nfatalities_cumulative = expand_cumulative(fatalities_long, \"Fatalities\")\nwounded_cumulative = expand_cumulative(wounded_long, \"Wounded\")\n\n# Animated line: Fatalities\nfig_killed = px.line(\n    fatalities_cumulative,\n    x=\"Date\", y=\"Fatalities\", color=\"Group\",\n    animation_frame=\"Frame\", title=\"Animated Monthly Fatalities (Cumulative)\",\n    color_discrete_map={\n        \"Nationals killed\": \"#d62728\",\n        \"Internationals killed\": \"#1f77b4\"\n    }\n)\n\nfig_killed.update_traces(mode=\"lines\")  # remove points\n\n# Animated line: Wounded\nfig_wounded = px.line(\n    wounded_cumulative,\n    x=\"Date\", y=\"Wounded\", color=\"Group\",\n    animation_frame=\"Frame\", title=\"Animated Monthly Injuries (Cumulative)\",\n    color_discrete_map={\n        \"Nationals wounded\": \"#d62728\",\n        \"Internationals wounded\": \"#1f77b4\"\n    }\n)\n\nfig_wounded.update_traces(mode=\"lines\")  # remove points\n\n# Save HTML\noutput_dir = \"../assets/introduction\"\nos.makedirs(output_dir, exist_ok=True)\nfig_killed.write_html(f\"{output_dir}/timeline_fatalities_line.html\")\nfig_wounded.write_html(f\"{output_dir}/timeline_wounded_line.html\")\n\n\nGeography\n\nimport pandas as pd\nimport plotly.express as px\nimport os\n\n# Load and clean data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df[df[\"Country\"].notna()]\ndf[\"Country\"] = df[\"Country\"].str.strip().str.title()  # Standardize country names\n\n# Aggregate data\ncountry_counts = df.groupby(\"Country\").size().reset_index(name=\"Incidents\")\n\n# Create choropleth with professional styling\nfig = px.choropleth(\n    country_counts,\n    locations=\"Country\",\n    locationmode=\"country names\",\n    color=\"Incidents\",\n    hover_name=\"Country\",\n    hover_data={\"Incidents\": \":.0f\", \"Country\": False},  # Cleaner hover\n    color_continuous_scale=\"Viridis\",  # Changed from \"OrRd\" to \"Viridis\"\n    range_color=[0, country_counts[\"Incidents\"].quantile(0.95)],  # Reduce outlier impact\n    title=\"&lt;b&gt;Attacks on Humanitarian Workers&lt;/b&gt;&lt;br&gt;&lt;sup&gt;1997–2024 | By Country&lt;/sup&gt;\",\n    projection=\"orthographic\",  # More modern projection\n    height=530\n)\n\n# Professional layout adjustments\nfig.update_layout(\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        coastlinecolor=\"LightGrey\",\n        landcolor=\"WhiteSmoke\",\n        subunitcolor=\"Grey\",\n        showcountries=True,\n        countrycolor=\"Grey\",\n        countrywidth=0.5\n    ),\n    coloraxis_colorbar=dict(\n        title=\"Attack Count\",\n        thickness=15,\n        len=0.75,\n        yanchor=\"middle\",\n        y=0.5,\n        xanchor=\"right\",\n        x=0.95,\n        ticks=\"outside\"\n    ),\n    title={\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top',\n        'font': dict(size=22, family=\"Inconsolata, sans-serif\")\n    },\n    font=dict(family=\"Inconsolata, sans-serif\"),\n    margin={\"r\":30, \"t\":100, \"l\":30, \"b\":30},\n    paper_bgcolor=\"white\",\n    plot_bgcolor=\"white\"\n)\n\n# Save output\noutput_dir = \"../assets/geography\"\nos.makedirs(output_dir, exist_ok=True)\nheatmap_path = f\"{output_dir}/professional_attack_heatmap.html\"\nfig.write_html(\n    heatmap_path,\n    include_plotlyjs=\"cdn\",  # Smaller file size\n    full_html=False,\n    config={\"displayModeBar\": False}  # Cleaner presentation\n)\n\nheatmap_path\n\n'../assets/geography/professional_attack_heatmap.html'\n\n\n\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Check available country column name (assume it's 'Country' – change if needed)\n# Count incidents per country\nincident_counts = df[\"Country\"].value_counts().reset_index()\nincident_counts.columns = [\"Country\", \"Incident Count\"]\n\n# Display top countries by incident count\nprint(incident_counts.head(20))  # Top 10 countries\n\n                             Country  Incident Count\n0                        Afghanistan             610\n1                        South Sudan             583\n2                              Sudan             381\n3               Syrian Arab Republic             368\n4                            Somalia             315\n5                           DR Congo             233\n6   Occupied Palestinian Territories             158\n7           Central African Republic             142\n8                               Mali             126\n9                           Pakistan             113\n10                          Ethiopia             106\n11                             Yemen             106\n12                           Nigeria              87\n13                              Iraq              76\n14                           Myanmar              73\n15                             Haiti              70\n16                             Kenya              65\n17                         Sri Lanka              54\n18                          Cameroon              51\n19                            Uganda              45\n\n\n\n\nAttacks\n\n# Reload dataset using your project path structure\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ndf = df.dropna(subset=[\"Means of attack\", \"Total killed\"])\n\n# Compute statistics\nfatality_stats = df.groupby(\"Means of attack\")[\"Total killed\"].agg([\"count\", \"mean\"]).reset_index()\nfatality_stats.columns = [\"Means of Attack\", \"Incident Count\", \"Avg Fatalities\"]\nfatality_stats = fatality_stats.sort_values(\"Avg Fatalities\", ascending=False).reset_index(drop=True)\n\n# Color mapping\nnorm = mcolors.Normalize(vmin=0, vmax=len(fatality_stats))\ncmap = cm.get_cmap(\"magma\")\nreversed_colors = [cmap(norm(i)) for i in reversed(range(len(fatality_stats)))]\n\n# === Final Lollipop Chart ===\nplt.figure(figsize=(14, 7), dpi=120)\nax = plt.gca()\nfor i, row in fatality_stats.iterrows():\n    ax.plot([0, row[\"Avg Fatalities\"]], [i, i], color='lightgray', linewidth=2, zorder=1)\n    ax.scatter(row[\"Avg Fatalities\"], i,\n               s=row[\"Incident Count\"] * 1.5,\n               color=reversed_colors[i],\n               edgecolor='black',\n               marker='o',\n               zorder=2)\n\n# Axes and styling\nax.set_yticks(range(len(fatality_stats)))\nax.set_yticklabels(fatality_stats[\"Means of Attack\"], fontsize=10)\nplt.title(\"Lollipop Chart of Average Fatalities by Method\", fontsize=20, fontweight='bold', pad=20)\nplt.xlabel(\"Average Fatalities per Incident\", fontsize=18, fontweight='bold')\nplt.ylabel(\"Means of Attack\", fontsize=18, fontweight='bold')\nax.set_facecolor('#f2e8ff')\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\n\n# Custom legend\nfrom matplotlib.lines import Line2D\nlegend_elements = [\n    Line2D([0], [0], marker='o', color='w', label='Less Frequent Method', markerfacecolor='#bbbbbb', markersize=8),\n    Line2D([0], [0], marker='o', color='w', label='More Frequent Method', markerfacecolor='#222222', markersize=14)\n]\nax.legend(handles=legend_elements, title=\"Dot Size = Incident Volume\", loc=\"upper right\", fontsize=13, title_fontsize=15)\n\n# Save to your path\noutput_path = \"../assets/attacks/lethal_lollipop.png\"\nos.makedirs(os.path.dirname(output_path), exist_ok=True)\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight', facecolor=ax.get_facecolor())\nplt.show()\n\n/tmp/ipykernel_8884/4012561084.py:12: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# Load dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Clean relevant columns\ndf = df.dropna(subset=[\"Attack context\", \"Total killed\", \"Year\"])\ndf[\"Total killed\"] = df[\"Total killed\"].fillna(0)\n\n# Normalize colors\ncontext_order = df[\"Attack context\"].value_counts().index\ncmap = cm.get_cmap(\"magma\")\nnorm = mcolors.Normalize(vmin=0, vmax=len(context_order))\ncontext_palette = {ctx: cmap(norm(i)) for i, ctx in enumerate(context_order)}\n\n# Set up the output paths\noutput_dir = \"../assets/attacks\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Regenerate the stacked area plot with updated formatting and save path\n\n# Pivot context by year\ntimeline_df = df.groupby([\"Year\", \"Attack context\"]).size().reset_index(name=\"Incidents\")\npivoted = timeline_df.pivot(index=\"Year\", columns=\"Attack context\", values=\"Incidents\").fillna(0)\n\n# Plot\nplt.figure(figsize=(14, 7), dpi=120)\nax = pivoted.plot.area(colormap=\"magma\", figsize=(14, 7), linewidth=0)\n\n# Titles and formatting\nplt.title(\"Attack Contexts Over Time (1997–2024)\", fontsize=20, fontweight='bold', pad=20)\nplt.xlabel(\"Year\", fontsize=18, fontweight='bold')\nplt.ylabel(\"Number of Incidents\", fontsize=18, fontweight='bold')\n\nax = plt.gca()\nax.set_facecolor('#f2e8ff')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.5)\n    ax.spines[spine].set_color('white')\n\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\nax.legend(fontsize=13, title=\"Context\", title_fontsize=15)\n\n# Save to project path\noutput_path = \"../assets/attacks/context_timeline.png\"\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight', facecolor=ax.get_facecolor())\nplt.show()\n\n/tmp/ipykernel_8884/3595468490.py:17: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n\n\n&lt;Figure size 1680x840 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nTargets\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# ======================\n# DATA PREPARATION\n# ======================\ndf = pd.read_csv(\"../data/security_incidents.csv\")\norg_cols = [\"UN\", \"INGO\", \"ICRC\", \"NRCS and IFRC\", \"NNGO\", \"Other\"]\ndf_combo = df[org_cols + [\"Total killed\", \"Total kidnapped\"]].fillna(0)\nmelted = df_combo.melt(id_vars=[\"Total killed\", \"Total kidnapped\"], var_name=\"Org_Type\", value_name=\"Flag\")\nstack_data = melted[melted[\"Flag\"] == 1].groupby(\"Org_Type\")[[\"Total killed\", \"Total kidnapped\"]].sum()\nstack_data = stack_data.sort_values(\"Total killed\", ascending=True)\n\n# ======================\n# VISUALIZATION\n# ======================\ncustom_colors = {\n    \"Total killed\": \"#6a0dad\",  # royal purple\n    \"Total kidnapped\": \"#f0c419\"  # gold\n}\n\nplt.figure(figsize=(10, 6), dpi=120)\nax = stack_data.plot(\n    kind=\"barh\",\n    stacked=True,\n    color=[custom_colors[col] for col in stack_data.columns],\n    width=0.7,\n)\n\n# Title and axis\nax.set_title(\"Fatalities & Kidnappings by Organization Type\", fontsize=11, fontweight='bold', pad=50, loc='center')\nplt.xlabel(\"Number of Victims\", fontsize=11, labelpad=10, fontweight='bold')\nplt.ylabel(\"Organization Type\", fontsize=11, labelpad=10, fontweight='bold')\n\n# Style\nax.set_facecolor('#f2e8ff')\nax.grid(True, linestyle='--', linewidth=1.2, color='white')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.2)\n    ax.spines[spine].set_color('white')\n\n# Legend\nplt.legend(title=\"Outcome\", fontsize=11, title_fontsize=11, loc=\"best\")\n\n# ======================\n# SAVE OUTPUT\n# ======================\noutput_path = \"../assets/targets/org_type_stacked_final.png\"\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight', facecolor=ax.get_facecolor())\nplt.show()\n\n&lt;Figure size 1200x720 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\n\n# Load dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# ======================\n# GENDER DISTRIBUTION\n# ======================\n# Clean & sum gender fields\ngender_cols = [\"Gender Male\", \"Gender Female\", \"Gender Unknown\"]\ngender_data = df[gender_cols].fillna(0).sum().sort_values(ascending=True).reset_index()\ngender_data.columns = [\"Gender\", \"Count\"]\n\n# Define theme-friendly color palette (soft purple/pink)\ncustom_colors = {\n    \"Gender Female\": \"#f59dd4\",  # soft pink\n    \"Gender Male\": \"#9370DB\",    # medium purple\n    \"Gender Unknown\": \"#dcd6f7\"  # pale lavender\n}\n\n# ======================\n# HORIZONTAL BAR CHART\n# ======================\nplt.figure(figsize=(8, 5), dpi=120)\nsns.barplot(\n    data=gender_data,\n    x=\"Count\",\n    y=\"Gender\",\n    palette=[custom_colors[g] for g in gender_data[\"Gender\"]]\n)\nplt.title(\"Reported Gender of Affected Aid Workers\", fontsize=20, fontweight=\"bold\", pad=20)\nplt.xlabel(\"Number of Victims\", fontsize=18, fontweight=\"bold\")\nplt.ylabel(\"Gender\", fontsize=18, fontweight=\"bold\")\nplt.grid(axis=\"x\", linestyle=\"--\", linewidth=1, color=\"white\")\nplt.gca().set_facecolor('#f2e8ff')\nfor spine in ['top', 'right']:\n    plt.gca().spines[spine].set_visible(False)\nfor spine in ['bottom', 'left']:\n    plt.gca().spines[spine].set_linewidth(1.2)\n    plt.gca().spines[spine].set_color('white')\n\nplt.tight_layout()\nplt.savefig(\"../assets/targets/gender_bar_chart.png\", bbox_inches=\"tight\")\nplt.show()\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load data\ndf = pd.read_csv(\"../data/security_incidents.csv\")\ngender_data = df[[\"Gender Male\", \"Gender Female\", \"Gender Unknown\"]].fillna(0).sum().sort_values(ascending=True).reset_index()\ngender_data.columns = [\"Gender\", \"Count\"]\n\nlabels = gender_data[\"Gender\"]\nvalues = gender_data[\"Count\"]\n\n# Sample colormap options to experiment with\ncolor_map_options = {\n    \"Plasma\": [\"#f0f921\", \"#f1605d\", \"#7201a8\"],\n    \"CoolWarm\": [\"#67a9cf\", \"#ef8a62\", \"#f7f7f7\"],\n    \"Viridis\": [\"#fde725\", \"#21918c\", \"#440154\"],\n    \"SpringPastel\": [\"#ffb3ba\", \"#bae1ff\", \"#e2f0cb\"]\n}\n\n# Select one to apply here (change as desired)\ncolors_used = color_map_options[\"SpringPastel\"]\n\n# Create beautified pie chart\nfig, ax = plt.subplots(figsize=(8, 6), dpi=120)\nwedges, texts, autotexts = ax.pie(\n    values,\n    labels=None,\n    colors=colors_used,\n    autopct='%1.1f%%',\n    startangle=140,\n    pctdistance=0.8,\n    textprops={'fontsize': 14, 'color': 'black'}\n)\n\n# Add legend\nax.legend(\n    wedges,\n    labels,\n    title=\"Gender\",\n    loc=\"center left\",\n    bbox_to_anchor=(1, 0.5),\n    fontsize=13,\n    title_fontsize=15\n)\n\n# Save output\nplt.tight_layout()\nplt.savefig(\"../assets/targets/gender_pie_chart.png\", bbox_inches=\"tight\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\n\n# Load dataset\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Count actor types\nactor_counts = df[\"Actor type\"].fillna(\"Unknown\").value_counts().reset_index()\nactor_counts.columns = [\"Actor Type\", \"Incident Count\"]\nactor_counts = actor_counts.sort_values(\"Incident Count\", ascending=False).reset_index(drop=True)\n\n# Calculate percentage for legend\nactor_counts[\"Percentage\"] = (actor_counts[\"Incident Count\"] / actor_counts[\"Incident Count\"].sum() * 100).round(1)\n\n# Remove the last two (lowest frequency actor types)\nactor_trimmed = actor_counts.iloc[:-2].copy()\n\n# Create legend labels with percentage\nlegend_labels_trimmed = [\n    f\"{row['Actor Type']} ({row['Percentage']}%)\" for _, row in actor_trimmed.iterrows()\n]\n\n# Inverted magma colormap\ncmap = cm.get_cmap(\"magma_r\")\nnorm = mcolors.Normalize(vmin=0, vmax=len(actor_trimmed) - 1)\ncolors_trimmed = [cmap(norm(i)) for i in range(len(actor_trimmed))]\n\n# Plot donut chart\nfig, ax = plt.subplots(figsize=(9, 7), dpi=120)\nwedges, _ = ax.pie(\n    actor_trimmed[\"Incident Count\"],\n    labels=None,\n    startangle=140,\n    wedgeprops=dict(width=0.45),\n    colors=colors_trimmed\n)\n\n# Add legend\nax.legend(\n    wedges,\n    legend_labels_trimmed,\n    title=\"Actor Type\",\n    loc=\"center left\",\n    bbox_to_anchor=(1, 0.5),\n    fontsize=13,\n    title_fontsize=15\n)\n\n# Aspect ratio and layout\nax.set(aspect=\"equal\")\nplt.tight_layout()\n\n# Save\nplt.savefig(\"../assets/targets/actor_type_donut_inversed_trimmed.png\", bbox_inches=\"tight\")\nplt.show()\n\n/tmp/ipykernel_8884/669546779.py:26: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n\n\n\n\n\n\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as mcolors\nimport os\n\n# ========================\n# LOAD AND PREPARE DATA\n# ========================\ndf = pd.read_csv(\"../data/security_incidents.csv\")\n\n# Get top 10 actor names by incident count\ntop_actors = df[\"Actor name\"].value_counts().dropna().head(10).reset_index()\ntop_actors.columns = [\"Actor Name\", \"Incident Count\"]\n\n# Sort descending so most incidents are on top of the Y-axis\ntop_actors_sorted = top_actors.sort_values(\"Incident Count\", ascending=False).reset_index(drop=True)\n\n# Normalize for color mapping (inverted magma for light-to-dark)\ncmap = cm.get_cmap(\"magma_r\")\nnorm = mcolors.Normalize(vmin=0, vmax=len(top_actors_sorted) - 1)\ncolors = [cmap(norm(i)) for i in range(len(top_actors_sorted))]\n\n# ========================\n# PLOT SETUP\n# ========================\nplt.figure(figsize=(10, 6), dpi=120)\nax = sns.barplot(\n    data=top_actors_sorted,\n    x=\"Incident Count\",\n    y=\"Actor Name\",\n    palette=colors\n)\n\n# Titles and axis labels\nax.set_title(\"Top 10 Perpetrators by Attack Frequency\", fontsize=20, fontweight='bold', pad=20)\nax.set_xlabel(\"Number of Incidents\", fontsize=18, fontweight='bold')\nax.set_ylabel(\"Actor Name\", fontsize=18, fontweight='bold')\n\n# Theme and styling\nax.set_facecolor('#f2e8ff')\nax.grid(True, axis='x', linestyle='--', linewidth=1.2, color='white')\nfor spine in ['top', 'right']:\n    ax.spines[spine].set_visible(False)\nfor spine in ['bottom', 'left']:\n    ax.spines[spine].set_linewidth(1.2)\n    ax.spines[spine].set_color(\"white\")\n\n# ========================\n# SAVE OUTPUT\n# ========================\noutput_path = \"../assets/targets/top_actors_bar_descending.png\"\nplt.tight_layout()\nplt.savefig(output_path, bbox_inches='tight')\nplt.show()\n\n/tmp/ipykernel_8884/700440263.py:21: MatplotlibDeprecationWarning:\n\nThe get_cmap function was deprecated in Matplotlib 3.7 and will be removed in 3.11. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap()`` or ``pyplot.get_cmap()`` instead.\n\n/tmp/ipykernel_8884/700440263.py:29: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect."
  },
  {
    "objectID": "targets.html",
    "href": "targets.html",
    "title": "Targets of Terror",
    "section": "",
    "text": "Humanitarian workers are not just caught in the crossfire — they are often deliberately chosen targets. This section profiles who is most frequently attacked, and who is behind those attacks.\nUsing structured victim data, we reveal how national staff, UN agencies, and local NGOs bear the brunt of modern violence. Aid workers are targeted not because of what they do — but because of what they represent: international presence, foreign influence, or local dissent.\nWe also analyze the perpetrators behind these incidents — from state militaries and militias to globally recognized armed groups like the Taliban, Al-Itihaad, LRA, and FARC. Their motives range from political intimidation to economic gain to deliberate obstruction of aid.\nUnderstanding these dynamics is critical: protection begins with profiling the threat and who it targets."
  },
  {
    "objectID": "targets.html#targeted-by-role-who-bears-the-brunt",
    "href": "targets.html#targeted-by-role-who-bears-the-brunt",
    "title": "Targets of Terror",
    "section": "Targeted by Role: Who Bears the Brunt?",
    "text": "Targeted by Role: Who Bears the Brunt?\n\n\n\nThis chart shows which types of humanitarian organizations face the greatest physical threats in the field.\n\nInternational NGOs (INGOs) and National NGOs (NNGOs) together account for the majority of both fatalities and kidnappings, highlighting their high exposure and frontline presence.\nUnited Nations staff also represent a significant portion of incidents, reflecting their roles in peacekeeping, logistics, and high-visibility missions.\nLocal Red Cross/Crescent (NRCS) and IFRC units, while smaller in scale, experience a measurable volume of threats — suggesting that even neutral, emblem-bearing actors are not spared.\n\nThis distribution reveals an important operational truth: no organization type is immune, but those embedded most deeply in local contexts often face the gravest risk."
  },
  {
    "objectID": "targets.html#gender-breakdown-of-victimized-aid-workers",
    "href": "targets.html#gender-breakdown-of-victimized-aid-workers",
    "title": "Targets of Terror",
    "section": "Gender Breakdown of Victimized Aid Workers",
    "text": "Gender Breakdown of Victimized Aid Workers\n\n\n\nThis visualization presents the recorded gender of affected humanitarian workers from 1997 to 2024.\n\nMale staff make up the majority of recorded victims — reflecting staffing patterns, but also the higher exposure of national male personnel to frontline duties.\nOnly 7% of incidents involve women, though the real number is likely underreported due to gaps in gender-disaggregated data.\nNearly half (47%) of all incidents include no recorded gender, underscoring the need for improved data collection during crisis reporting and monitoring.\n\nAccurate gender tracking is critical not only for understanding risk, but for identifying gender-based violence and designing targeted security protocols for women in the field."
  },
  {
    "objectID": "targets.html#who-attacks-humanitarian-workers",
    "href": "targets.html#who-attacks-humanitarian-workers",
    "title": "Targets of Terror",
    "section": "Who Attacks Humanitarian Workers?",
    "text": "Who Attacks Humanitarian Workers?\n\n\n\nThis chart highlights the main categories of perpetrators behind attacks on humanitarian personnel from 1997 to 2024.\n\nThe vast majority of attacks are attributed to non-state actors — including armed groups, militias, and insurgents.\nState actors also account for a notable share, often linked to bureaucratic crackdowns, detentions, or violence during protests and regime suppression.\nUnknown actors reflect the reality of chaotic reporting environments, where attribution is difficult or dangerous.\n\n\nThe fact that over 85% of recorded incidents come from non-state and unknown sources reinforces the need for strong local intelligence, negotiated access, and adaptable risk protocols in volatile zones."
  },
  {
    "objectID": "targets.html#top-perpetrators-by-attack-frequency",
    "href": "targets.html#top-perpetrators-by-attack-frequency",
    "title": "Targets of Terror",
    "section": "Top Perpetrators by Attack Frequency",
    "text": "Top Perpetrators by Attack Frequency\n\n\n\nThis chart highlights the top 10 perpetrator groups responsible for the majority of attacks on humanitarian personnel from 1997 to 2024.\n\nUnknown and unattributed actors account for a vast portion of incidents — a reflection of operating in chaotic, insecure environments where proper attribution is often impossible.\nNamed perpetrators include both state-affiliated militaries (e.g., IDF, Russian Armed Forces) and non-state insurgents (e.g., Taliban, Al Shabaab).\nThis diversity of actors underscores the multipolar nature of humanitarian threats, where violence can come from official forces, armed factions, or local groups acting independently."
  },
  {
    "objectID": "targets.html#the-anatomy-of-targeting",
    "href": "targets.html#the-anatomy-of-targeting",
    "title": "Targets of Terror",
    "section": "The Anatomy of Targeting",
    "text": "The Anatomy of Targeting\nThree dominant patterns define how — and why — humanitarian workers are targeted:\n\nProximity-Based Risk\nNational staff remain the most affected, not by accident, but by design: they are the first responders, closest to volatile zones, and often viewed with political suspicion for working with international agencies (Outcomes 2023).\nSymbolic Violence\nAttacks on aid workers often represent broader hostility toward foreign influence or government-aligned institutions. In Gaza, Syria, and Afghanistan, medical and relief workers are increasingly seen as extensions of political agendas (News 2023; Event Data Project (ACLED) 2023).\nStrategic Targeting by Armed Groups\nPerpetrators — from insurgent groups to militaries — now weaponize humanitarianism. Whether through intimidation, kidnapping, or disinformation, aid actors are no longer just collateral — they are the objective (Red Cross (ICRC) 1997).\n\n\n\n“These are not accidents of war…\n\n\nThey are deliberate acts of suppression, disruption, and political messaging.”\n\n\n— Humanitarian Access Watch 2024 (Outcomes 2023)"
  }
]